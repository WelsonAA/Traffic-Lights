
Traffic Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d9e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000e12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000e12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015be  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2a  00000000  00000000  0000259e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f35  00000000  00000000  00002fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00003f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000714  00000000  00000000  0000415c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a62  00000000  00000000  00004870  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000052d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 98 02 	call	0x530	; 0x530 <main>
  74:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
#include "app.h"
volatile uint8_t CURRENT_MODE;
extern volatile uint8_t BTN_PRESSED;
extern volatile uint8_t MODE;
EN_appError_t APP_init(){
    if(LED_init(PORT_CAR,PIN_GREEN)!=LED_OK)
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_init>
  84:	81 11       	cpse	r24, r1
  86:	33 c0       	rjmp	.+102    	; 0xee <APP_init+0x72>
        return APP_LED_ERROR;
    if(LED_init(PORT_CAR,PIN_YELLOW)!=LED_OK)
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	81 e4       	ldi	r24, 0x41	; 65
  8c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_init>
  90:	81 11       	cpse	r24, r1
  92:	2f c0       	rjmp	.+94     	; 0xf2 <APP_init+0x76>
        return APP_LED_ERROR;
    if(LED_init(PORT_CAR,PIN_RED)!=LED_OK)
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_init>
  9c:	81 11       	cpse	r24, r1
  9e:	2b c0       	rjmp	.+86     	; 0xf6 <APP_init+0x7a>
        return APP_LED_ERROR;
    if(LED_init(PORT_PED,PIN_GREEN)!=LED_OK)
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	82 e4       	ldi	r24, 0x42	; 66
  a4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_init>
  a8:	81 11       	cpse	r24, r1
  aa:	27 c0       	rjmp	.+78     	; 0xfa <APP_init+0x7e>
        return APP_LED_ERROR;
    if(LED_init(PORT_PED,PIN_YELLOW)!=LED_OK)
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_init>
  b4:	81 11       	cpse	r24, r1
  b6:	23 c0       	rjmp	.+70     	; 0xfe <APP_init+0x82>
        return APP_LED_ERROR;
    if(LED_init(PORT_PED,PIN_RED)!=LED_OK)
  b8:	62 e0       	ldi	r22, 0x02	; 2
  ba:	82 e4       	ldi	r24, 0x42	; 66
  bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_init>
  c0:	81 11       	cpse	r24, r1
  c2:	1f c0       	rjmp	.+62     	; 0x102 <APP_init+0x86>
        return APP_LED_ERROR;
    if(BTN_init(PORT_INT,PIN_INT)!=BTN_OK)
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	84 e4       	ldi	r24, 0x44	; 68
  c8:	0e 94 ce 00 	call	0x19c	; 0x19c <BTN_init>
  cc:	81 11       	cpse	r24, r1
  ce:	1b c0       	rjmp	.+54     	; 0x106 <APP_init+0x8a>
        return APP_LED_ERROR;
    if(TIMER_init()!=TIMER_OK)
  d0:	0e 94 1c 04 	call	0x838	; 0x838 <TIMER_init>
  d4:	81 11       	cpse	r24, r1
  d6:	19 c0       	rjmp	.+50     	; 0x10a <APP_init+0x8e>
        return APP_LED_ERROR;
    if(INT0_init()!=INT_OK)
  d8:	0e 94 0e 04 	call	0x81c	; 0x81c <INT0_init>
  dc:	81 11       	cpse	r24, r1
  de:	17 c0       	rjmp	.+46     	; 0x10e <APP_init+0x92>
        return APP_LED_ERROR;
    CURRENT_MODE=NORMAL;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    BTN_PRESSED=NOT_PRESSED;
  e6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <BTN_PRESSED>
    return APP_OK;
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret
volatile uint8_t CURRENT_MODE;
extern volatile uint8_t BTN_PRESSED;
extern volatile uint8_t MODE;
EN_appError_t APP_init(){
    if(LED_init(PORT_CAR,PIN_GREEN)!=LED_OK)
        return APP_LED_ERROR;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	08 95       	ret
    if(LED_init(PORT_CAR,PIN_YELLOW)!=LED_OK)
        return APP_LED_ERROR;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	08 95       	ret
    if(LED_init(PORT_CAR,PIN_RED)!=LED_OK)
        return APP_LED_ERROR;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	08 95       	ret
    if(LED_init(PORT_PED,PIN_GREEN)!=LED_OK)
        return APP_LED_ERROR;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	08 95       	ret
    if(LED_init(PORT_PED,PIN_YELLOW)!=LED_OK)
        return APP_LED_ERROR;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	08 95       	ret
    if(LED_init(PORT_PED,PIN_RED)!=LED_OK)
        return APP_LED_ERROR;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	08 95       	ret
    if(BTN_init(PORT_INT,PIN_INT)!=BTN_OK)
        return APP_LED_ERROR;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	08 95       	ret
    if(TIMER_init()!=TIMER_OK)
        return APP_LED_ERROR;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret
    if(INT0_init()!=INT_OK)
        return APP_LED_ERROR;
 10e:	81 e0       	ldi	r24, 0x01	; 1
    CURRENT_MODE=NORMAL;
    BTN_PRESSED=NOT_PRESSED;
    return APP_OK;
}
 110:	08 95       	ret

00000112 <APP_start>:
EN_appError_t APP_start() {
    while (1){
        if(BTN_PRESSED == PRESSED){//executing code regarding button pressing
 112:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BTN_PRESSED>
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	99 f4       	brne	.+38     	; 0x140 <APP_start+0x2e>
            switch (MODE_abnormal()) {
 11a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MODE_abnormal>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	59 f0       	breq	.+22     	; 0x138 <APP_start+0x26>
 122:	18 f4       	brcc	.+6      	; 0x12a <APP_start+0x18>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	31 f0       	breq	.+12     	; 0x134 <APP_start+0x22>
 128:	f4 cf       	rjmp	.-24     	; 0x112 <APP_start>
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	e1 f0       	breq	.+56     	; 0x166 <APP_start+0x54>
 12e:	84 30       	cpi	r24, 0x04	; 4
 130:	29 f0       	breq	.+10     	; 0x13c <APP_start+0x2a>
 132:	ef cf       	rjmp	.-34     	; 0x112 <APP_start>
                case MODE_LED_ERROR:{
                    return APP_LED_ERROR;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	08 95       	ret
                }
                case MODE_TIMER_ERROR:{
                    return APP_TIMER_ERROR;
                }
                case MODE_BTN_ERROR:{
                    return APP_BTN_ERROR;
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	08 95       	ret
                }
                case MODE_TIMER_LARGE_DELAY:{
                    return APP_TIMER_LARGE_DELAY;
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	08 95       	ret
                    continue;
                }
            }
        }
        else{//executing code normally without having the button pressed
            switch (MODE_normal()) {
 140:	0e 94 10 01 	call	0x220	; 0x220 <MODE_normal>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	59 f0       	breq	.+22     	; 0x15e <APP_start+0x4c>
 148:	18 f4       	brcc	.+6      	; 0x150 <APP_start+0x3e>
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	31 f0       	breq	.+12     	; 0x15a <APP_start+0x48>
 14e:	e1 cf       	rjmp	.-62     	; 0x112 <APP_start>
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	59 f0       	breq	.+22     	; 0x16a <APP_start+0x58>
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	29 f0       	breq	.+10     	; 0x162 <APP_start+0x50>
 158:	dc cf       	rjmp	.-72     	; 0x112 <APP_start>
                case MODE_LED_ERROR: {
                    return APP_LED_ERROR;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	08 95       	ret
                }
                case MODE_TIMER_ERROR: {
                    return APP_TIMER_ERROR;
                }
                case MODE_BTN_ERROR: {
                    return APP_BTN_ERROR;
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	08 95       	ret
                }
                case MODE_TIMER_LARGE_DELAY: {
                    return APP_TIMER_LARGE_DELAY;
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	08 95       	ret
            switch (MODE_abnormal()) {
                case MODE_LED_ERROR:{
                    return APP_LED_ERROR;
                }
                case MODE_TIMER_ERROR:{
                    return APP_TIMER_ERROR;
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	08 95       	ret
            switch (MODE_normal()) {
                case MODE_LED_ERROR: {
                    return APP_LED_ERROR;
                }
                case MODE_TIMER_ERROR: {
                    return APP_TIMER_ERROR;
 16a:	84 e0       	ldi	r24, 0x04	; 4
                    continue;
                }
            }
        }
    }
}
 16c:	08 95       	ret

0000016e <__vector_1>:
ISR(EXT_INT_0){//handling the interrupt
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
    if(CURRENT_MODE==NORMAL && MODE!=ABNORMAL_CODE)
 17a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	39 f4       	brne	.+14     	; 0x190 <__vector_1+0x22>
 182:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <MODE>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	19 f0       	breq	.+6      	; 0x190 <__vector_1+0x22>
        BTN_PRESSED=PRESSED;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <BTN_PRESSED>
}
 190:	8f 91       	pop	r24
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <BTN_init>:
// Created by George Welson on 07-Oct-22.
//

#include "btn.h"
EN_btnError_t BTN_init(uint8_t btnPort,uint8_t btnPin) {
    return(DIO_init(btnPort,btnPin,IN));
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_init>
}
 1a2:	08 95       	ret

000001a4 <LED_init>:
EN_ledError_t LED_init(uint8_t ledPort,uint8_t ledPin){
    return(DIO_init(ledPort,ledPin,OUT));
}
EN_ledError_t LED_on(uint8_t ledPort,uint8_t ledPin){
    return(DIO_write(ledPort,ledPin,HIGH));
}
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_init>
 1aa:	08 95       	ret

000001ac <LED_off>:
EN_ledError_t LED_off(uint8_t ledPort,uint8_t ledPin){
    return(DIO_write(ledPort,ledPin,LOW));
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	0e 94 3b 03 	call	0x676	; 0x676 <DIO_write>
}
 1b2:	08 95       	ret

000001b4 <LED_toggle>:
EN_ledError_t LED_toggle(uint8_t ledPort,uint8_t ledPin){
    return(DIO_toggle(ledPort,ledPin));
 1b4:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_toggle>
}
 1b8:	08 95       	ret

000001ba <LED_blink>:
EN_ledError_t LED_blink(uint8_t ledPortCar,uint8_t ledPinCar,uint8_t ledPortPed,uint8_t ledPinPed){
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	18 2f       	mov	r17, r24
 1c8:	06 2f       	mov	r16, r22
 1ca:	e4 2e       	mov	r14, r20
 1cc:	f2 2e       	mov	r15, r18
    for(int i=0;i<2;i++) {
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
 1d2:	1b c0       	rjmp	.+54     	; 0x20a <LED_blink+0x50>
        if (DIO_toggle(ledPortCar, ledPinCar) != DIO_OK) {
 1d4:	60 2f       	mov	r22, r16
 1d6:	81 2f       	mov	r24, r17
 1d8:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_toggle>
 1dc:	88 23       	and	r24, r24
 1de:	29 f0       	breq	.+10     	; 0x1ea <LED_blink+0x30>
            return (DIO_toggle(ledPortCar, ledPinCar));
 1e0:	60 2f       	mov	r22, r16
 1e2:	81 2f       	mov	r24, r17
 1e4:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_toggle>
 1e8:	14 c0       	rjmp	.+40     	; 0x212 <LED_blink+0x58>
        }
        if (DIO_toggle(ledPortPed, ledPinPed) != DIO_OK) {
 1ea:	6f 2d       	mov	r22, r15
 1ec:	8e 2d       	mov	r24, r14
 1ee:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_toggle>
 1f2:	88 23       	and	r24, r24
 1f4:	29 f0       	breq	.+10     	; 0x200 <LED_blink+0x46>
            return (DIO_toggle(ledPortCar, ledPinCar));
 1f6:	60 2f       	mov	r22, r16
 1f8:	81 2f       	mov	r24, r17
 1fa:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_toggle>
 1fe:	09 c0       	rjmp	.+18     	; 0x212 <LED_blink+0x58>
        }
        TIMER_delay(500);
 200:	84 ef       	ldi	r24, 0xF4	; 244
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 27 04 	call	0x84e	; 0x84e <TIMER_delay>
}
EN_ledError_t LED_toggle(uint8_t ledPort,uint8_t ledPin){
    return(DIO_toggle(ledPort,ledPin));
}
EN_ledError_t LED_blink(uint8_t ledPortCar,uint8_t ledPinCar,uint8_t ledPortPed,uint8_t ledPinPed){
    for(int i=0;i<2;i++) {
 208:	21 96       	adiw	r28, 0x01	; 1
 20a:	c2 30       	cpi	r28, 0x02	; 2
 20c:	d1 05       	cpc	r29, r1
 20e:	14 f3       	brlt	.-60     	; 0x1d4 <LED_blink+0x1a>
        if (DIO_toggle(ledPortPed, ledPinPed) != DIO_OK) {
            return (DIO_toggle(ledPortCar, ledPinCar));
        }
        TIMER_delay(500);
    }
    return LED_OK;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	08 95       	ret

00000220 <MODE_normal>:
//
#include "mode.h"
extern volatile uint8_t CURRENT_MODE;
volatile uint8_t BTN_PRESSED;
volatile uint8_t MODE;
EN_modeError_t MODE_normal(){
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
    //starting at green for cars, red for pedestrians
    MODE=NORMAL_CODE;
 224:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <MODE>
    if(LED_toggle(PORT_CAR,PIN_GREEN)!=LED_OK)
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	81 e4       	ldi	r24, 0x41	; 65
 22c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 230:	81 11       	cpse	r24, r1
 232:	99 c0       	rjmp	.+306    	; 0x366 <MODE_normal+0x146>
        return MODE_LED_ERROR;
    CURRENT_MODE = NORMAL;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    if(LED_toggle(PORT_PED,PIN_RED)!=LED_OK)
 23a:	62 e0       	ldi	r22, 0x02	; 2
 23c:	82 e4       	ldi	r24, 0x42	; 66
 23e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 242:	81 11       	cpse	r24, r1
 244:	92 c0       	rjmp	.+292    	; 0x36a <MODE_normal+0x14a>
        return MODE_LED_ERROR;
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
 246:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BTN_PRESSED>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	09 f4       	brne	.+2      	; 0x250 <MODE_normal+0x30>
 24e:	8f c0       	rjmp	.+286    	; 0x36e <MODE_normal+0x14e>
 250:	c0 e0       	ldi	r28, 0x00	; 0
 252:	d0 e0       	ldi	r29, 0x00	; 0
 254:	0c c0       	rjmp	.+24     	; 0x26e <MODE_normal+0x4e>
        return MODE_BTN_PRESSED;
    for(int i=0;i<10;i++) {
        if(TIMER_delay(500)!=TIMER_OK)
 256:	84 ef       	ldi	r24, 0xF4	; 244
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 27 04 	call	0x84e	; 0x84e <TIMER_delay>
 25e:	81 11       	cpse	r24, r1
 260:	88 c0       	rjmp	.+272    	; 0x372 <MODE_normal+0x152>
            return MODE_TIMER_ERROR;
        if(BTN_PRESSED == PRESSED)//checking if the button is pressed
 262:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BTN_PRESSED>
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	09 f4       	brne	.+2      	; 0x26c <MODE_normal+0x4c>
 26a:	85 c0       	rjmp	.+266    	; 0x376 <MODE_normal+0x156>
    CURRENT_MODE = NORMAL;
    if(LED_toggle(PORT_PED,PIN_RED)!=LED_OK)
        return MODE_LED_ERROR;
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
        return MODE_BTN_PRESSED;
    for(int i=0;i<10;i++) {
 26c:	21 96       	adiw	r28, 0x01	; 1
 26e:	ca 30       	cpi	r28, 0x0A	; 10
 270:	d1 05       	cpc	r29, r1
 272:	8c f3       	brlt	.-30     	; 0x256 <MODE_normal+0x36>
        if(TIMER_delay(500)!=TIMER_OK)
            return MODE_TIMER_ERROR;
        if(BTN_PRESSED == PRESSED)//checking if the button is pressed
            return MODE_BTN_PRESSED;
    }
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
 274:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BTN_PRESSED>
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	09 f4       	brne	.+2      	; 0x27e <MODE_normal+0x5e>
 27c:	7e c0       	rjmp	.+252    	; 0x37a <MODE_normal+0x15a>
 27e:	c0 e0       	ldi	r28, 0x00	; 0
 280:	d0 e0       	ldi	r29, 0x00	; 0
 282:	0e c0       	rjmp	.+28     	; 0x2a0 <MODE_normal+0x80>
        return MODE_BTN_PRESSED;
    //blinking yellow light for both car and pedestrian for 5 seconds
    for(int i = 0;i<5;i++){
        if(LED_blink(PORT_CAR, PIN_YELLOW, PORT_PED, PIN_YELLOW)!=LED_OK)
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	42 e4       	ldi	r20, 0x42	; 66
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	81 e4       	ldi	r24, 0x41	; 65
 28c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LED_blink>
 290:	81 11       	cpse	r24, r1
 292:	75 c0       	rjmp	.+234    	; 0x37e <MODE_normal+0x15e>
            return MODE_LED_ERROR;
        if(BTN_PRESSED == PRESSED)//checking if the button is pressed
 294:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BTN_PRESSED>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	09 f4       	brne	.+2      	; 0x29e <MODE_normal+0x7e>
 29c:	72 c0       	rjmp	.+228    	; 0x382 <MODE_normal+0x162>
            return MODE_BTN_PRESSED;
    }
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
        return MODE_BTN_PRESSED;
    //blinking yellow light for both car and pedestrian for 5 seconds
    for(int i = 0;i<5;i++){
 29e:	21 96       	adiw	r28, 0x01	; 1
 2a0:	c5 30       	cpi	r28, 0x05	; 5
 2a2:	d1 05       	cpc	r29, r1
 2a4:	7c f3       	brlt	.-34     	; 0x284 <MODE_normal+0x64>
        if(LED_blink(PORT_CAR, PIN_YELLOW, PORT_PED, PIN_YELLOW)!=LED_OK)
            return MODE_LED_ERROR;
        if(BTN_PRESSED == PRESSED)//checking if the button is pressed
            return MODE_BTN_PRESSED;
    }
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
 2a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BTN_PRESSED>
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <MODE_normal+0x90>
 2ae:	6b c0       	rjmp	.+214    	; 0x386 <MODE_normal+0x166>
        return MODE_BTN_PRESSED;
    //switching cars to red and pedestrian to green
    if(LED_toggle(PORT_CAR,PIN_GREEN)!=LED_OK)
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	81 e4       	ldi	r24, 0x41	; 65
 2b4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 2b8:	81 11       	cpse	r24, r1
 2ba:	67 c0       	rjmp	.+206    	; 0x38a <MODE_normal+0x16a>
        return MODE_LED_ERROR;
    CURRENT_MODE = PEDESTRIAN;
 2bc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    if(LED_toggle(PORT_PED,PIN_RED)!=LED_OK)
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	82 e4       	ldi	r24, 0x42	; 66
 2c4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 2c8:	81 11       	cpse	r24, r1
 2ca:	61 c0       	rjmp	.+194    	; 0x38e <MODE_normal+0x16e>
        return MODE_LED_ERROR;
    if(LED_toggle(PORT_CAR,PIN_RED)!=LED_OK)
 2cc:	62 e0       	ldi	r22, 0x02	; 2
 2ce:	81 e4       	ldi	r24, 0x41	; 65
 2d0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 2d4:	81 11       	cpse	r24, r1
 2d6:	5d c0       	rjmp	.+186    	; 0x392 <MODE_normal+0x172>
        return MODE_LED_ERROR;
    if(LED_toggle(PORT_PED,PIN_GREEN)!=LED_OK)
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	82 e4       	ldi	r24, 0x42	; 66
 2dc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 2e0:	81 11       	cpse	r24, r1
 2e2:	59 c0       	rjmp	.+178    	; 0x396 <MODE_normal+0x176>
        return MODE_LED_ERROR;
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
 2e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BTN_PRESSED>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	09 f4       	brne	.+2      	; 0x2ee <MODE_normal+0xce>
 2ec:	56 c0       	rjmp	.+172    	; 0x39a <MODE_normal+0x17a>
 2ee:	c0 e0       	ldi	r28, 0x00	; 0
 2f0:	d0 e0       	ldi	r29, 0x00	; 0
 2f2:	0c c0       	rjmp	.+24     	; 0x30c <MODE_normal+0xec>
        return MODE_BTN_PRESSED;
    for(int i=0;i<10;i++) {
        if(TIMER_delay(500)!=TIMER_OK)
 2f4:	84 ef       	ldi	r24, 0xF4	; 244
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 27 04 	call	0x84e	; 0x84e <TIMER_delay>
 2fc:	81 11       	cpse	r24, r1
 2fe:	4f c0       	rjmp	.+158    	; 0x39e <MODE_normal+0x17e>
            return MODE_TIMER_ERROR;
        if(BTN_PRESSED == PRESSED)//checking if the button is pressed
 300:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BTN_PRESSED>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	09 f4       	brne	.+2      	; 0x30a <MODE_normal+0xea>
 308:	4c c0       	rjmp	.+152    	; 0x3a2 <MODE_normal+0x182>
        return MODE_LED_ERROR;
    if(LED_toggle(PORT_PED,PIN_GREEN)!=LED_OK)
        return MODE_LED_ERROR;
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
        return MODE_BTN_PRESSED;
    for(int i=0;i<10;i++) {
 30a:	21 96       	adiw	r28, 0x01	; 1
 30c:	ca 30       	cpi	r28, 0x0A	; 10
 30e:	d1 05       	cpc	r29, r1
 310:	8c f3       	brlt	.-30     	; 0x2f4 <MODE_normal+0xd4>
        if(TIMER_delay(500)!=TIMER_OK)
            return MODE_TIMER_ERROR;
        if(BTN_PRESSED == PRESSED)//checking if the button is pressed
            return MODE_BTN_PRESSED;
    }
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
 312:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BTN_PRESSED>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	09 f4       	brne	.+2      	; 0x31c <MODE_normal+0xfc>
 31a:	45 c0       	rjmp	.+138    	; 0x3a6 <MODE_normal+0x186>
 31c:	c0 e0       	ldi	r28, 0x00	; 0
 31e:	d0 e0       	ldi	r29, 0x00	; 0
 320:	0d c0       	rjmp	.+26     	; 0x33c <MODE_normal+0x11c>
        return MODE_BTN_PRESSED;
    //blinking yellow light for both car and pedestrian for 5 seconds
    for(int i = 0;i<5;i++){
        if(LED_blink(PORT_CAR, PIN_YELLOW, PORT_PED, PIN_YELLOW)!=LED_OK)
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	42 e4       	ldi	r20, 0x42	; 66
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	81 e4       	ldi	r24, 0x41	; 65
 32a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LED_blink>
 32e:	81 11       	cpse	r24, r1
 330:	3c c0       	rjmp	.+120    	; 0x3aa <MODE_normal+0x18a>
            return MODE_LED_ERROR;
        if(BTN_PRESSED == PRESSED)//checking if the button is pressed
 332:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BTN_PRESSED>
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	d1 f1       	breq	.+116    	; 0x3ae <MODE_normal+0x18e>
            return MODE_BTN_PRESSED;
    }
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
        return MODE_BTN_PRESSED;
    //blinking yellow light for both car and pedestrian for 5 seconds
    for(int i = 0;i<5;i++){
 33a:	21 96       	adiw	r28, 0x01	; 1
 33c:	c5 30       	cpi	r28, 0x05	; 5
 33e:	d1 05       	cpc	r29, r1
 340:	84 f3       	brlt	.-32     	; 0x322 <MODE_normal+0x102>
        if(LED_blink(PORT_CAR, PIN_YELLOW, PORT_PED, PIN_YELLOW)!=LED_OK)
            return MODE_LED_ERROR;
        if(BTN_PRESSED == PRESSED)//checking if the button is pressed
            return MODE_BTN_PRESSED;
    }
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
 342:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BTN_PRESSED>
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	a1 f1       	breq	.+104    	; 0x3b2 <MODE_normal+0x192>
        return MODE_BTN_PRESSED;
    //turning all on leds to off
    if(LED_toggle(PORT_CAR,PIN_RED)!=LED_OK)
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	81 e4       	ldi	r24, 0x41	; 65
 34e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 352:	81 11       	cpse	r24, r1
 354:	30 c0       	rjmp	.+96     	; 0x3b6 <MODE_normal+0x196>
        return MODE_LED_ERROR;
    if(LED_toggle(PORT_PED,PIN_GREEN)!=LED_OK)
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	82 e4       	ldi	r24, 0x42	; 66
 35a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 35e:	88 23       	and	r24, r24
 360:	61 f1       	breq	.+88     	; 0x3ba <MODE_normal+0x19a>
        return MODE_LED_ERROR;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	2b c0       	rjmp	.+86     	; 0x3bc <MODE_normal+0x19c>
volatile uint8_t MODE;
EN_modeError_t MODE_normal(){
    //starting at green for cars, red for pedestrians
    MODE=NORMAL_CODE;
    if(LED_toggle(PORT_CAR,PIN_GREEN)!=LED_OK)
        return MODE_LED_ERROR;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	29 c0       	rjmp	.+82     	; 0x3bc <MODE_normal+0x19c>
    CURRENT_MODE = NORMAL;
    if(LED_toggle(PORT_PED,PIN_RED)!=LED_OK)
        return MODE_LED_ERROR;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	27 c0       	rjmp	.+78     	; 0x3bc <MODE_normal+0x19c>
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
        return MODE_BTN_PRESSED;
 36e:	85 e0       	ldi	r24, 0x05	; 5
 370:	25 c0       	rjmp	.+74     	; 0x3bc <MODE_normal+0x19c>
    for(int i=0;i<10;i++) {
        if(TIMER_delay(500)!=TIMER_OK)
            return MODE_TIMER_ERROR;
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	23 c0       	rjmp	.+70     	; 0x3bc <MODE_normal+0x19c>
        if(BTN_PRESSED == PRESSED)//checking if the button is pressed
            return MODE_BTN_PRESSED;
 376:	85 e0       	ldi	r24, 0x05	; 5
 378:	21 c0       	rjmp	.+66     	; 0x3bc <MODE_normal+0x19c>
    }
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
        return MODE_BTN_PRESSED;
 37a:	85 e0       	ldi	r24, 0x05	; 5
 37c:	1f c0       	rjmp	.+62     	; 0x3bc <MODE_normal+0x19c>
    //blinking yellow light for both car and pedestrian for 5 seconds
    for(int i = 0;i<5;i++){
        if(LED_blink(PORT_CAR, PIN_YELLOW, PORT_PED, PIN_YELLOW)!=LED_OK)
            return MODE_LED_ERROR;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	1d c0       	rjmp	.+58     	; 0x3bc <MODE_normal+0x19c>
        if(BTN_PRESSED == PRESSED)//checking if the button is pressed
            return MODE_BTN_PRESSED;
 382:	85 e0       	ldi	r24, 0x05	; 5
 384:	1b c0       	rjmp	.+54     	; 0x3bc <MODE_normal+0x19c>
    }
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
        return MODE_BTN_PRESSED;
 386:	85 e0       	ldi	r24, 0x05	; 5
 388:	19 c0       	rjmp	.+50     	; 0x3bc <MODE_normal+0x19c>
    //switching cars to red and pedestrian to green
    if(LED_toggle(PORT_CAR,PIN_GREEN)!=LED_OK)
        return MODE_LED_ERROR;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	17 c0       	rjmp	.+46     	; 0x3bc <MODE_normal+0x19c>
    CURRENT_MODE = PEDESTRIAN;
    if(LED_toggle(PORT_PED,PIN_RED)!=LED_OK)
        return MODE_LED_ERROR;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	15 c0       	rjmp	.+42     	; 0x3bc <MODE_normal+0x19c>
    if(LED_toggle(PORT_CAR,PIN_RED)!=LED_OK)
        return MODE_LED_ERROR;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	13 c0       	rjmp	.+38     	; 0x3bc <MODE_normal+0x19c>
    if(LED_toggle(PORT_PED,PIN_GREEN)!=LED_OK)
        return MODE_LED_ERROR;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	11 c0       	rjmp	.+34     	; 0x3bc <MODE_normal+0x19c>
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
        return MODE_BTN_PRESSED;
 39a:	85 e0       	ldi	r24, 0x05	; 5
 39c:	0f c0       	rjmp	.+30     	; 0x3bc <MODE_normal+0x19c>
    for(int i=0;i<10;i++) {
        if(TIMER_delay(500)!=TIMER_OK)
            return MODE_TIMER_ERROR;
 39e:	83 e0       	ldi	r24, 0x03	; 3
 3a0:	0d c0       	rjmp	.+26     	; 0x3bc <MODE_normal+0x19c>
        if(BTN_PRESSED == PRESSED)//checking if the button is pressed
            return MODE_BTN_PRESSED;
 3a2:	85 e0       	ldi	r24, 0x05	; 5
 3a4:	0b c0       	rjmp	.+22     	; 0x3bc <MODE_normal+0x19c>
    }
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
        return MODE_BTN_PRESSED;
 3a6:	85 e0       	ldi	r24, 0x05	; 5
 3a8:	09 c0       	rjmp	.+18     	; 0x3bc <MODE_normal+0x19c>
    //blinking yellow light for both car and pedestrian for 5 seconds
    for(int i = 0;i<5;i++){
        if(LED_blink(PORT_CAR, PIN_YELLOW, PORT_PED, PIN_YELLOW)!=LED_OK)
            return MODE_LED_ERROR;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	07 c0       	rjmp	.+14     	; 0x3bc <MODE_normal+0x19c>
        if(BTN_PRESSED == PRESSED)//checking if the button is pressed
            return MODE_BTN_PRESSED;
 3ae:	85 e0       	ldi	r24, 0x05	; 5
 3b0:	05 c0       	rjmp	.+10     	; 0x3bc <MODE_normal+0x19c>
    }
    if(BTN_PRESSED == PRESSED)//checking if the button is pressed
        return MODE_BTN_PRESSED;
 3b2:	85 e0       	ldi	r24, 0x05	; 5
 3b4:	03 c0       	rjmp	.+6      	; 0x3bc <MODE_normal+0x19c>
    //turning all on leds to off
    if(LED_toggle(PORT_CAR,PIN_RED)!=LED_OK)
        return MODE_LED_ERROR;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <MODE_normal+0x19c>
    if(LED_toggle(PORT_PED,PIN_GREEN)!=LED_OK)
        return MODE_LED_ERROR;
    return MODE_OK;
 3ba:	80 e0       	ldi	r24, 0x00	; 0
}
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <MODE_abnormal>:
EN_modeError_t MODE_abnormal(){
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
    //avoid checking for button press in abnormal mode to avoid responding to double presses
        //turn off all leds
    if(LED_off(PORT_CAR,PIN_GREEN)!=LED_OK)
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	81 e4       	ldi	r24, 0x41	; 65
 3ca:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LED_off>
 3ce:	81 11       	cpse	r24, r1
 3d0:	89 c0       	rjmp	.+274    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
        return MODE_LED_ERROR;
    if(LED_off(PORT_CAR,PIN_YELLOW)!=LED_OK)
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	81 e4       	ldi	r24, 0x41	; 65
 3d6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LED_off>
 3da:	81 11       	cpse	r24, r1
 3dc:	85 c0       	rjmp	.+266    	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
        return MODE_LED_ERROR;
    if(LED_off(PORT_CAR,PIN_RED)!=LED_OK)
 3de:	62 e0       	ldi	r22, 0x02	; 2
 3e0:	81 e4       	ldi	r24, 0x41	; 65
 3e2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LED_off>
 3e6:	81 11       	cpse	r24, r1
 3e8:	81 c0       	rjmp	.+258    	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
        return MODE_LED_ERROR;
    if(LED_off(PORT_PED,PIN_GREEN)!=LED_OK)
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	82 e4       	ldi	r24, 0x42	; 66
 3ee:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LED_off>
 3f2:	81 11       	cpse	r24, r1
 3f4:	7d c0       	rjmp	.+250    	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
        return MODE_LED_ERROR;
    if(LED_off(PORT_PED,PIN_YELLOW)!=LED_OK)
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	82 e4       	ldi	r24, 0x42	; 66
 3fa:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LED_off>
 3fe:	81 11       	cpse	r24, r1
 400:	79 c0       	rjmp	.+242    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
        return MODE_LED_ERROR;
    if(LED_off(PORT_PED,PIN_RED)!=LED_OK)
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	82 e4       	ldi	r24, 0x42	; 66
 406:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LED_off>
 40a:	81 11       	cpse	r24, r1
 40c:	75 c0       	rjmp	.+234    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
        return MODE_LED_ERROR;
    BTN_PRESSED=NOT_PRESSED;
 40e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <BTN_PRESSED>
        //checking if the green car light was on
    if(CURRENT_MODE==NORMAL){
 412:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	09 f0       	breq	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41a:	70 c0       	rjmp	.+224    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
            //keeping only the car green light and pedestrian red light on and turning off yellow leds
        MODE=ABNORMAL_CODE;
 41c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <MODE>
        if(LED_toggle(PORT_CAR,PIN_GREEN)!=LED_OK)
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	81 e4       	ldi	r24, 0x41	; 65
 424:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 428:	81 11       	cpse	r24, r1
 42a:	6a c0       	rjmp	.+212    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
            return MODE_LED_ERROR;
        if(LED_toggle(PORT_PED,PIN_RED)!=LED_OK)
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	82 e4       	ldi	r24, 0x42	; 66
 430:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 434:	81 11       	cpse	r24, r1
 436:	66 c0       	rjmp	.+204    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 438:	c0 e0       	ldi	r28, 0x00	; 0
 43a:	d0 e0       	ldi	r29, 0x00	; 0
 43c:	09 c0       	rjmp	.+18     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
            return MODE_LED_ERROR;
        //blinking yellow light for both car and pedestrian for 5 seconds
        for(int i = 0;i<5;i++){
            if(LED_blink(PORT_CAR, PIN_YELLOW, PORT_PED, PIN_YELLOW)!=LED_OK)
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	42 e4       	ldi	r20, 0x42	; 66
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	81 e4       	ldi	r24, 0x41	; 65
 446:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LED_blink>
 44a:	81 11       	cpse	r24, r1
 44c:	5d c0       	rjmp	.+186    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
        if(LED_toggle(PORT_CAR,PIN_GREEN)!=LED_OK)
            return MODE_LED_ERROR;
        if(LED_toggle(PORT_PED,PIN_RED)!=LED_OK)
            return MODE_LED_ERROR;
        //blinking yellow light for both car and pedestrian for 5 seconds
        for(int i = 0;i<5;i++){
 44e:	21 96       	adiw	r28, 0x01	; 1
 450:	c5 30       	cpi	r28, 0x05	; 5
 452:	d1 05       	cpc	r29, r1
 454:	a4 f3       	brlt	.-24     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
            if(LED_blink(PORT_CAR, PIN_YELLOW, PORT_PED, PIN_YELLOW)!=LED_OK)
                return MODE_LED_ERROR;
        }
        //switching from green for cars and red for pedestrian to red for cars and green for pedestrian
        //allowing pedestrians to cross for 5 seconds
        if(LED_toggle(PORT_CAR,PIN_GREEN)!=LED_OK)
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	81 e4       	ldi	r24, 0x41	; 65
 45a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 45e:	81 11       	cpse	r24, r1
 460:	55 c0       	rjmp	.+170    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
            return MODE_LED_ERROR;
        CURRENT_MODE=PEDESTRIAN;
 462:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
        if(LED_toggle(PORT_CAR,PIN_RED)!=LED_OK)
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	81 e4       	ldi	r24, 0x41	; 65
 46a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 46e:	81 11       	cpse	r24, r1
 470:	4f c0       	rjmp	.+158    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
            return MODE_LED_ERROR;
        if(LED_toggle(PORT_PED,PIN_GREEN)!=LED_OK)
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	82 e4       	ldi	r24, 0x42	; 66
 476:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 47a:	81 11       	cpse	r24, r1
 47c:	4b c0       	rjmp	.+150    	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
            return MODE_LED_ERROR;
        if(LED_toggle(PORT_PED,PIN_RED)!=LED_OK)
 47e:	62 e0       	ldi	r22, 0x02	; 2
 480:	82 e4       	ldi	r24, 0x42	; 66
 482:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 486:	81 11       	cpse	r24, r1
 488:	47 c0       	rjmp	.+142    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 48a:	c0 e0       	ldi	r28, 0x00	; 0
 48c:	d0 e0       	ldi	r29, 0x00	; 0
 48e:	07 c0       	rjmp	.+14     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
            return MODE_LED_ERROR;
        for(int i=0;i<10;i++) {
            if(TIMER_delay(500)!=TIMER_OK)
 490:	84 ef       	ldi	r24, 0xF4	; 244
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 27 04 	call	0x84e	; 0x84e <TIMER_delay>
 498:	81 11       	cpse	r24, r1
 49a:	40 c0       	rjmp	.+128    	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
            return MODE_LED_ERROR;
        if(LED_toggle(PORT_PED,PIN_GREEN)!=LED_OK)
            return MODE_LED_ERROR;
        if(LED_toggle(PORT_PED,PIN_RED)!=LED_OK)
            return MODE_LED_ERROR;
        for(int i=0;i<10;i++) {
 49c:	21 96       	adiw	r28, 0x01	; 1
 49e:	ca 30       	cpi	r28, 0x0A	; 10
 4a0:	d1 05       	cpc	r29, r1
 4a2:	b4 f3       	brlt	.-20     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 4a4:	c0 e0       	ldi	r28, 0x00	; 0
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
 4a8:	09 c0       	rjmp	.+18     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
            if(TIMER_delay(500)!=TIMER_OK)
                return MODE_TIMER_ERROR;
        }
        //blinking yellow light for both car and pedestrian for 5 seconds
        for(int i = 0;i<5;i++){
            if(LED_blink(PORT_CAR, PIN_YELLOW, PORT_PED, PIN_YELLOW)!=LED_OK)
 4aa:	21 e0       	ldi	r18, 0x01	; 1
 4ac:	42 e4       	ldi	r20, 0x42	; 66
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	81 e4       	ldi	r24, 0x41	; 65
 4b2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LED_blink>
 4b6:	81 11       	cpse	r24, r1
 4b8:	33 c0       	rjmp	.+102    	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
        for(int i=0;i<10;i++) {
            if(TIMER_delay(500)!=TIMER_OK)
                return MODE_TIMER_ERROR;
        }
        //blinking yellow light for both car and pedestrian for 5 seconds
        for(int i = 0;i<5;i++){
 4ba:	21 96       	adiw	r28, 0x01	; 1
 4bc:	c5 30       	cpi	r28, 0x05	; 5
 4be:	d1 05       	cpc	r29, r1
 4c0:	a4 f3       	brlt	.-24     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
            if(LED_blink(PORT_CAR, PIN_YELLOW, PORT_PED, PIN_YELLOW)!=LED_OK)
                return MODE_LED_ERROR;
        }
        //switching from green for pedestrians and red for car to red for cars and green for pedestrian
        if(LED_toggle(PORT_CAR,PIN_RED)!=LED_OK)
 4c2:	62 e0       	ldi	r22, 0x02	; 2
 4c4:	81 e4       	ldi	r24, 0x41	; 65
 4c6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 4ca:	81 11       	cpse	r24, r1
 4cc:	2b c0       	rjmp	.+86     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
            return MODE_LED_ERROR;
        if(LED_toggle(PORT_PED,PIN_GREEN)!=LED_OK)
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	82 e4       	ldi	r24, 0x42	; 66
 4d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LED_toggle>
 4d6:	81 11       	cpse	r24, r1
 4d8:	27 c0       	rjmp	.+78     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
            return MODE_LED_ERROR;
        CURRENT_MODE=NORMAL;
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        return MODE_OK;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	23 c0       	rjmp	.+70     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
}
EN_modeError_t MODE_abnormal(){
    //avoid checking for button press in abnormal mode to avoid responding to double presses
        //turn off all leds
    if(LED_off(PORT_CAR,PIN_GREEN)!=LED_OK)
        return MODE_LED_ERROR;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	21 c0       	rjmp	.+66     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
    if(LED_off(PORT_CAR,PIN_YELLOW)!=LED_OK)
        return MODE_LED_ERROR;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	1f c0       	rjmp	.+62     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
    if(LED_off(PORT_CAR,PIN_RED)!=LED_OK)
        return MODE_LED_ERROR;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	1d c0       	rjmp	.+58     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
    if(LED_off(PORT_PED,PIN_GREEN)!=LED_OK)
        return MODE_LED_ERROR;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	1b c0       	rjmp	.+54     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
    if(LED_off(PORT_PED,PIN_YELLOW)!=LED_OK)
        return MODE_LED_ERROR;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	19 c0       	rjmp	.+50     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
    if(LED_off(PORT_PED,PIN_RED)!=LED_OK)
        return MODE_LED_ERROR;
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	17 c0       	rjmp	.+46     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
        if(LED_toggle(PORT_PED,PIN_GREEN)!=LED_OK)
            return MODE_LED_ERROR;
        CURRENT_MODE=NORMAL;
        return MODE_OK;
    }
    return MODE_OK;
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	15 c0       	rjmp	.+42     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
        //checking if the green car light was on
    if(CURRENT_MODE==NORMAL){
            //keeping only the car green light and pedestrian red light on and turning off yellow leds
        MODE=ABNORMAL_CODE;
        if(LED_toggle(PORT_CAR,PIN_GREEN)!=LED_OK)
            return MODE_LED_ERROR;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	13 c0       	rjmp	.+38     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
        if(LED_toggle(PORT_PED,PIN_RED)!=LED_OK)
            return MODE_LED_ERROR;
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	11 c0       	rjmp	.+34     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
        //blinking yellow light for both car and pedestrian for 5 seconds
        for(int i = 0;i<5;i++){
            if(LED_blink(PORT_CAR, PIN_YELLOW, PORT_PED, PIN_YELLOW)!=LED_OK)
                return MODE_LED_ERROR;
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0f c0       	rjmp	.+30     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
        }
        //switching from green for cars and red for pedestrian to red for cars and green for pedestrian
        //allowing pedestrians to cross for 5 seconds
        if(LED_toggle(PORT_CAR,PIN_GREEN)!=LED_OK)
            return MODE_LED_ERROR;
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0d c0       	rjmp	.+26     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
        CURRENT_MODE=PEDESTRIAN;
        if(LED_toggle(PORT_CAR,PIN_RED)!=LED_OK)
            return MODE_LED_ERROR;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	0b c0       	rjmp	.+22     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
        if(LED_toggle(PORT_PED,PIN_GREEN)!=LED_OK)
            return MODE_LED_ERROR;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	09 c0       	rjmp	.+18     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
        if(LED_toggle(PORT_PED,PIN_RED)!=LED_OK)
            return MODE_LED_ERROR;
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	07 c0       	rjmp	.+14     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
        for(int i=0;i<10;i++) {
            if(TIMER_delay(500)!=TIMER_OK)
                return MODE_TIMER_ERROR;
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	05 c0       	rjmp	.+10     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
        }
        //blinking yellow light for both car and pedestrian for 5 seconds
        for(int i = 0;i<5;i++){
            if(LED_blink(PORT_CAR, PIN_YELLOW, PORT_PED, PIN_YELLOW)!=LED_OK)
                return MODE_LED_ERROR;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	03 c0       	rjmp	.+6      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
        }
        //switching from green for pedestrians and red for car to red for cars and green for pedestrian
        if(LED_toggle(PORT_CAR,PIN_RED)!=LED_OK)
            return MODE_LED_ERROR;
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	01 c0       	rjmp	.+2      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
        if(LED_toggle(PORT_PED,PIN_GREEN)!=LED_OK)
            return MODE_LED_ERROR;
 528:	81 e0       	ldi	r24, 0x01	; 1
        CURRENT_MODE=NORMAL;
        return MODE_OK;
    }
    return MODE_OK;
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <main>:
//
// Created by George Welson on 07-Oct-22.
//
#include "App/app.h"
int main(void){
    if(APP_init()!=APP_OK)
 530:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
 534:	81 11       	cpse	r24, r1
 536:	07 c0       	rjmp	.+14     	; 0x546 <main+0x16>
        return 1;
    if(APP_start()!=APP_OK)
 538:	0e 94 89 00 	call	0x112	; 0x112 <APP_start>
 53c:	88 23       	and	r24, r24
 53e:	31 f0       	breq	.+12     	; 0x54c <main+0x1c>
        return 1;
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	08 95       	ret
// Created by George Welson on 07-Oct-22.
//
#include "App/app.h"
int main(void){
    if(APP_init()!=APP_OK)
        return 1;
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	08 95       	ret
    if(APP_start()!=APP_OK)
        return 1;
    return 0;
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
}
 550:	08 95       	ret

00000552 <DIO_init>:
//

#include "dio.h"

EN_dioError_t DIO_init(uint8_t portNumber,uint8_t pinNumber,uint8_t direction){
    if(pinNumber>7||pinNumber<0)
 552:	68 30       	cpi	r22, 0x08	; 8
 554:	08 f0       	brcs	.+2      	; 0x558 <DIO_init+0x6>
 556:	83 c0       	rjmp	.+262    	; 0x65e <DIO_init+0x10c>
        return DIO_INVALID_PIN;
    switch(portNumber){
 558:	82 34       	cpi	r24, 0x42	; 66
 55a:	49 f1       	breq	.+82     	; 0x5ae <DIO_init+0x5c>
 55c:	18 f4       	brcc	.+6      	; 0x564 <DIO_init+0x12>
 55e:	81 34       	cpi	r24, 0x41	; 65
 560:	41 f0       	breq	.+16     	; 0x572 <DIO_init+0x20>
 562:	7f c0       	rjmp	.+254    	; 0x662 <DIO_init+0x110>
 564:	83 34       	cpi	r24, 0x43	; 67
 566:	09 f4       	brne	.+2      	; 0x56a <DIO_init+0x18>
 568:	40 c0       	rjmp	.+128    	; 0x5ea <DIO_init+0x98>
 56a:	84 34       	cpi	r24, 0x44	; 68
 56c:	09 f4       	brne	.+2      	; 0x570 <DIO_init+0x1e>
 56e:	5a c0       	rjmp	.+180    	; 0x624 <DIO_init+0xd2>
 570:	78 c0       	rjmp	.+240    	; 0x662 <DIO_init+0x110>
        case PORT_A:{
            if(direction==IN){
 572:	41 11       	cpse	r20, r1
 574:	0d c0       	rjmp	.+26     	; 0x590 <DIO_init+0x3e>
                CLEAR_BIT(DDRA,pinNumber);
 576:	2a b3       	in	r18, 0x1a	; 26
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_init+0x30>
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	6a 95       	dec	r22
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_init+0x2c>
 586:	80 95       	com	r24
 588:	82 23       	and	r24, r18
 58a:	8a bb       	out	0x1a, r24	; 26
                return DIO_OK;
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	08 95       	ret
            }
            else if(direction==OUT){
 590:	41 30       	cpi	r20, 0x01	; 1
 592:	09 f0       	breq	.+2      	; 0x596 <DIO_init+0x44>
 594:	68 c0       	rjmp	.+208    	; 0x666 <DIO_init+0x114>
                SET_BIT(DDRA,pinNumber);
 596:	2a b3       	in	r18, 0x1a	; 26
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_init+0x50>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	6a 95       	dec	r22
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_init+0x4c>
 5a6:	82 2b       	or	r24, r18
 5a8:	8a bb       	out	0x1a, r24	; 26
                return DIO_OK;
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	08 95       	ret
            }
            break;
        }

        case PORT_B:{
            if(direction==IN){
 5ae:	41 11       	cpse	r20, r1
 5b0:	0d c0       	rjmp	.+26     	; 0x5cc <DIO_init+0x7a>
                CLEAR_BIT(DDRB,pinNumber);
 5b2:	27 b3       	in	r18, 0x17	; 23
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <DIO_init+0x6c>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	6a 95       	dec	r22
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <DIO_init+0x68>
 5c2:	80 95       	com	r24
 5c4:	82 23       	and	r24, r18
 5c6:	87 bb       	out	0x17, r24	; 23
                return DIO_OK;
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	08 95       	ret
            }
            else if(direction==OUT){
 5cc:	41 30       	cpi	r20, 0x01	; 1
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <DIO_init+0x80>
 5d0:	4c c0       	rjmp	.+152    	; 0x66a <DIO_init+0x118>
                SET_BIT(DDRB,pinNumber);
 5d2:	27 b3       	in	r18, 0x17	; 23
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_init+0x8c>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	6a 95       	dec	r22
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_init+0x88>
 5e2:	82 2b       	or	r24, r18
 5e4:	87 bb       	out	0x17, r24	; 23
                return DIO_OK;
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	08 95       	ret
            }
            break;
        }

        case PORT_C:{
            if(direction==IN){
 5ea:	41 11       	cpse	r20, r1
 5ec:	0d c0       	rjmp	.+26     	; 0x608 <DIO_init+0xb6>
                CLEAR_BIT(DDRC,pinNumber);
 5ee:	24 b3       	in	r18, 0x14	; 20
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_init+0xa8>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	6a 95       	dec	r22
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_init+0xa4>
 5fe:	80 95       	com	r24
 600:	82 23       	and	r24, r18
 602:	84 bb       	out	0x14, r24	; 20
                return DIO_OK;
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	08 95       	ret
            }
            else if(direction==OUT){
 608:	41 30       	cpi	r20, 0x01	; 1
 60a:	89 f5       	brne	.+98     	; 0x66e <DIO_init+0x11c>
                SET_BIT(DDRC,pinNumber);
 60c:	24 b3       	in	r18, 0x14	; 20
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_init+0xc6>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_init+0xc2>
 61c:	82 2b       	or	r24, r18
 61e:	84 bb       	out	0x14, r24	; 20
                return DIO_OK;
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	08 95       	ret
            }
            break;
        }

        case PORT_D:{
            if(direction==IN){
 624:	41 11       	cpse	r20, r1
 626:	0d c0       	rjmp	.+26     	; 0x642 <DIO_init+0xf0>
                CLEAR_BIT(DDRD,pinNumber);
 628:	21 b3       	in	r18, 0x11	; 17
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_init+0xe2>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	6a 95       	dec	r22
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_init+0xde>
 638:	80 95       	com	r24
 63a:	82 23       	and	r24, r18
 63c:	81 bb       	out	0x11, r24	; 17
                return DIO_OK;
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	08 95       	ret
            }
            else if(direction==OUT){
 642:	41 30       	cpi	r20, 0x01	; 1
 644:	b1 f4       	brne	.+44     	; 0x672 <DIO_init+0x120>
                SET_BIT(DDRD,pinNumber);
 646:	21 b3       	in	r18, 0x11	; 17
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_init+0x100>
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	6a 95       	dec	r22
 654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_init+0xfc>
 656:	82 2b       	or	r24, r18
 658:	81 bb       	out	0x11, r24	; 17
                return DIO_OK;
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	08 95       	ret

#include "dio.h"

EN_dioError_t DIO_init(uint8_t portNumber,uint8_t pinNumber,uint8_t direction){
    if(pinNumber>7||pinNumber<0)
        return DIO_INVALID_PIN;
 65e:	82 e0       	ldi	r24, 0x02	; 2
 660:	08 95       	ret
            }
            break;
        }

        default:{
            return DIO_INVALID_PORT;
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	08 95       	ret
            else if(direction==OUT){
                SET_BIT(DDRA,pinNumber);
                return DIO_OK;
            }
            else{
                return DIO_INVALID_DIRECTION;
 666:	83 e0       	ldi	r24, 0x03	; 3
 668:	08 95       	ret
            else if(direction==OUT){
                SET_BIT(DDRB,pinNumber);
                return DIO_OK;
            }
            else{
                return DIO_INVALID_DIRECTION;
 66a:	83 e0       	ldi	r24, 0x03	; 3
 66c:	08 95       	ret
            else if(direction==OUT){
                SET_BIT(DDRC,pinNumber);
                return DIO_OK;
            }
            else{
                return DIO_INVALID_DIRECTION;
 66e:	83 e0       	ldi	r24, 0x03	; 3
 670:	08 95       	ret
            else if(direction==OUT){
                SET_BIT(DDRD,pinNumber);
                return DIO_OK;
            }
            else{
                return DIO_INVALID_DIRECTION;
 672:	83 e0       	ldi	r24, 0x03	; 3
        default:{
            return DIO_INVALID_PORT;
        }

    }
}
 674:	08 95       	ret

00000676 <DIO_write>:
EN_dioError_t DIO_write(uint8_t portNumber,uint8_t pinNumber,uint8_t value){
    if(pinNumber>7||pinNumber<0)
 676:	68 30       	cpi	r22, 0x08	; 8
 678:	08 f0       	brcs	.+2      	; 0x67c <DIO_write+0x6>
 67a:	83 c0       	rjmp	.+262    	; 0x782 <DIO_write+0x10c>
        return DIO_INVALID_PIN;
    switch(portNumber){
 67c:	82 34       	cpi	r24, 0x42	; 66
 67e:	49 f1       	breq	.+82     	; 0x6d2 <DIO_write+0x5c>
 680:	18 f4       	brcc	.+6      	; 0x688 <DIO_write+0x12>
 682:	81 34       	cpi	r24, 0x41	; 65
 684:	41 f0       	breq	.+16     	; 0x696 <DIO_write+0x20>
 686:	7f c0       	rjmp	.+254    	; 0x786 <DIO_write+0x110>
 688:	83 34       	cpi	r24, 0x43	; 67
 68a:	09 f4       	brne	.+2      	; 0x68e <DIO_write+0x18>
 68c:	40 c0       	rjmp	.+128    	; 0x70e <DIO_write+0x98>
 68e:	84 34       	cpi	r24, 0x44	; 68
 690:	09 f4       	brne	.+2      	; 0x694 <DIO_write+0x1e>
 692:	5a c0       	rjmp	.+180    	; 0x748 <DIO_write+0xd2>
 694:	78 c0       	rjmp	.+240    	; 0x786 <DIO_write+0x110>
        case PORT_A:{
            if(value==LOW){
 696:	41 11       	cpse	r20, r1
 698:	0d c0       	rjmp	.+26     	; 0x6b4 <DIO_write+0x3e>
                CLEAR_BIT(PORTA,pinNumber);
 69a:	2b b3       	in	r18, 0x1b	; 27
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_write+0x30>
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	6a 95       	dec	r22
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_write+0x2c>
 6aa:	80 95       	com	r24
 6ac:	82 23       	and	r24, r18
 6ae:	8b bb       	out	0x1b, r24	; 27
                return DIO_OK;
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	08 95       	ret
            }
            else if(value==HIGH){
 6b4:	41 30       	cpi	r20, 0x01	; 1
 6b6:	09 f0       	breq	.+2      	; 0x6ba <DIO_write+0x44>
 6b8:	68 c0       	rjmp	.+208    	; 0x78a <DIO_write+0x114>
                SET_BIT(PORTA,pinNumber);
 6ba:	2b b3       	in	r18, 0x1b	; 27
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_write+0x50>
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	6a 95       	dec	r22
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_write+0x4c>
 6ca:	82 2b       	or	r24, r18
 6cc:	8b bb       	out	0x1b, r24	; 27
                return DIO_OK;
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	08 95       	ret
            }
            break;
        }

        case PORT_B:{
            if(value==LOW){
 6d2:	41 11       	cpse	r20, r1
 6d4:	0d c0       	rjmp	.+26     	; 0x6f0 <DIO_write+0x7a>
                CLEAR_BIT(PORTB,pinNumber);
 6d6:	28 b3       	in	r18, 0x18	; 24
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_write+0x6c>
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	6a 95       	dec	r22
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <DIO_write+0x68>
 6e6:	80 95       	com	r24
 6e8:	82 23       	and	r24, r18
 6ea:	88 bb       	out	0x18, r24	; 24
                return DIO_OK;
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	08 95       	ret
            }
            else if(value==HIGH){
 6f0:	41 30       	cpi	r20, 0x01	; 1
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <DIO_write+0x80>
 6f4:	4c c0       	rjmp	.+152    	; 0x78e <DIO_write+0x118>
                SET_BIT(PORTB,pinNumber);
 6f6:	28 b3       	in	r18, 0x18	; 24
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_write+0x8c>
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	6a 95       	dec	r22
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_write+0x88>
 706:	82 2b       	or	r24, r18
 708:	88 bb       	out	0x18, r24	; 24
                return DIO_OK;
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	08 95       	ret
            }
            break;
        }

        case PORT_C:{
            if(value==LOW){
 70e:	41 11       	cpse	r20, r1
 710:	0d c0       	rjmp	.+26     	; 0x72c <DIO_write+0xb6>
                CLEAR_BIT(PORTC,pinNumber);
 712:	25 b3       	in	r18, 0x15	; 21
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_write+0xa8>
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	6a 95       	dec	r22
 720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_write+0xa4>
 722:	80 95       	com	r24
 724:	82 23       	and	r24, r18
 726:	85 bb       	out	0x15, r24	; 21
                return DIO_OK;
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	08 95       	ret
            }
            else if(value==HIGH){
 72c:	41 30       	cpi	r20, 0x01	; 1
 72e:	89 f5       	brne	.+98     	; 0x792 <DIO_write+0x11c>
                SET_BIT(PORTC,pinNumber);
 730:	25 b3       	in	r18, 0x15	; 21
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_write+0xc6>
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	6a 95       	dec	r22
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_write+0xc2>
 740:	82 2b       	or	r24, r18
 742:	85 bb       	out	0x15, r24	; 21
                return DIO_OK;
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	08 95       	ret
            }
            break;
        }

        case PORT_D:{
            if(value==LOW){
 748:	41 11       	cpse	r20, r1
 74a:	0d c0       	rjmp	.+26     	; 0x766 <DIO_write+0xf0>
                CLEAR_BIT(PORTD,pinNumber);
 74c:	22 b3       	in	r18, 0x12	; 18
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_write+0xe2>
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	6a 95       	dec	r22
 75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_write+0xde>
 75c:	80 95       	com	r24
 75e:	82 23       	and	r24, r18
 760:	82 bb       	out	0x12, r24	; 18
                return DIO_OK;
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	08 95       	ret
            }
            else if(value==HIGH){
 766:	41 30       	cpi	r20, 0x01	; 1
 768:	b1 f4       	brne	.+44     	; 0x796 <DIO_write+0x120>
                SET_BIT(PORTD,pinNumber);
 76a:	22 b3       	in	r18, 0x12	; 18
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_write+0x100>
 772:	88 0f       	add	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	6a 95       	dec	r22
 778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_write+0xfc>
 77a:	82 2b       	or	r24, r18
 77c:	82 bb       	out	0x12, r24	; 18
                return DIO_OK;
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	08 95       	ret

    }
}
EN_dioError_t DIO_write(uint8_t portNumber,uint8_t pinNumber,uint8_t value){
    if(pinNumber>7||pinNumber<0)
        return DIO_INVALID_PIN;
 782:	82 e0       	ldi	r24, 0x02	; 2
 784:	08 95       	ret
            }
            break;
        }

        default:{
            return DIO_INVALID_PORT;
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	08 95       	ret
            else if(value==HIGH){
                SET_BIT(PORTA,pinNumber);
                return DIO_OK;
            }
            else{
                return DIO_INVALID_VALUE;
 78a:	84 e0       	ldi	r24, 0x04	; 4
 78c:	08 95       	ret
            else if(value==HIGH){
                SET_BIT(PORTB,pinNumber);
                return DIO_OK;
            }
            else{
                return DIO_INVALID_VALUE;
 78e:	84 e0       	ldi	r24, 0x04	; 4
 790:	08 95       	ret
            else if(value==HIGH){
                SET_BIT(PORTC,pinNumber);
                return DIO_OK;
            }
            else{
                return DIO_INVALID_VALUE;
 792:	84 e0       	ldi	r24, 0x04	; 4
 794:	08 95       	ret
            else if(value==HIGH){
                SET_BIT(PORTD,pinNumber);
                return DIO_OK;
            }
            else{
                return DIO_INVALID_VALUE;
 796:	84 e0       	ldi	r24, 0x04	; 4
        default:{
            return DIO_INVALID_PORT;
        }

    }
}
 798:	08 95       	ret

0000079a <DIO_toggle>:
EN_dioError_t DIO_toggle(uint8_t portNumber,uint8_t pinNumber){
    if(pinNumber>7||pinNumber<0)
 79a:	68 30       	cpi	r22, 0x08	; 8
 79c:	d8 f5       	brcc	.+118    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
        return DIO_INVALID_PIN;
    switch(portNumber){
 79e:	82 34       	cpi	r24, 0x42	; 66
 7a0:	a9 f0       	breq	.+42     	; 0x7cc <DIO_toggle+0x32>
 7a2:	18 f4       	brcc	.+6      	; 0x7aa <DIO_toggle+0x10>
 7a4:	81 34       	cpi	r24, 0x41	; 65
 7a6:	31 f0       	breq	.+12     	; 0x7b4 <DIO_toggle+0x1a>
 7a8:	37 c0       	rjmp	.+110    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7aa:	83 34       	cpi	r24, 0x43	; 67
 7ac:	d9 f0       	breq	.+54     	; 0x7e4 <DIO_toggle+0x4a>
 7ae:	84 34       	cpi	r24, 0x44	; 68
 7b0:	29 f1       	breq	.+74     	; 0x7fc <DIO_toggle+0x62>
 7b2:	32 c0       	rjmp	.+100    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
        case PORT_A: {
            TOGGLE_BIT(PORTA, pinNumber);
 7b4:	2b b3       	in	r18, 0x1b	; 27
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_toggle+0x26>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	6a 95       	dec	r22
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_toggle+0x22>
 7c4:	82 27       	eor	r24, r18
 7c6:	8b bb       	out	0x1b, r24	; 27
            return DIO_OK;
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	08 95       	ret
        }
        case PORT_B: {
            TOGGLE_BIT(PORTB, pinNumber);
 7cc:	28 b3       	in	r18, 0x18	; 24
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_toggle+0x3e>
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	6a 95       	dec	r22
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_toggle+0x3a>
 7dc:	82 27       	eor	r24, r18
 7de:	88 bb       	out	0x18, r24	; 24
            return DIO_OK;
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	08 95       	ret
        }
        case PORT_C: {
            TOGGLE_BIT(PORTC, pinNumber);
 7e4:	25 b3       	in	r18, 0x15	; 21
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_toggle+0x56>
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	6a 95       	dec	r22
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_toggle+0x52>
 7f4:	82 27       	eor	r24, r18
 7f6:	85 bb       	out	0x15, r24	; 21
            return DIO_OK;
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	08 95       	ret
        }
        case PORT_D: {
            TOGGLE_BIT(PORTD, pinNumber);
 7fc:	22 b3       	in	r18, 0x12	; 18
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 804:	88 0f       	add	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	6a 95       	dec	r22
 80a:	e2 f7       	brpl	.-8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 80c:	82 27       	eor	r24, r18
 80e:	82 bb       	out	0x12, r24	; 18
            return DIO_OK;
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	08 95       	ret

    }
}
EN_dioError_t DIO_toggle(uint8_t portNumber,uint8_t pinNumber){
    if(pinNumber>7||pinNumber<0)
        return DIO_INVALID_PIN;
 814:	82 e0       	ldi	r24, 0x02	; 2
 816:	08 95       	ret
        case PORT_D: {
            TOGGLE_BIT(PORTD, pinNumber);
            return DIO_OK;
        }
        default:{
            return DIO_INVALID_PORT;
 818:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
}
 81a:	08 95       	ret

0000081c <INT0_init>:
//
// Created by George Welson on 01-Nov-22.
//
#include "interrupts.h"
EN_interruptError_t INT0_init(){
    CLEAR_BIT(MCUCR,BIT_0);
 81c:	85 b7       	in	r24, 0x35	; 53
 81e:	8e 7f       	andi	r24, 0xFE	; 254
 820:	85 bf       	out	0x35, r24	; 53
    SET_BIT(MCUCR,BIT_1);
 822:	85 b7       	in	r24, 0x35	; 53
 824:	82 60       	ori	r24, 0x02	; 2
 826:	85 bf       	out	0x35, r24	; 53
    SET_BIT(GICR,BIT_6);
 828:	8b b7       	in	r24, 0x3b	; 59
 82a:	80 64       	ori	r24, 0x40	; 64
 82c:	8b bf       	out	0x3b, r24	; 59
    SET_BIT(SREG,BIT_7);
 82e:	8f b7       	in	r24, 0x3f	; 63
 830:	80 68       	ori	r24, 0x80	; 128
 832:	8f bf       	out	0x3f, r24	; 63
    return INT_OK;
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	08 95       	ret

00000838 <TIMER_init>:
// Created by George Welson on 10-Oct-22.
//
#include "tmr.h"
EN_timerError_T TIMER_init(){
    //normal mode
    CLEAR_BIT(TCCR0,BIT_0);
 838:	83 b7       	in	r24, 0x33	; 51
 83a:	8e 7f       	andi	r24, 0xFE	; 254
 83c:	83 bf       	out	0x33, r24	; 51
    CLEAR_BIT(TCCR0,BIT_1);
 83e:	83 b7       	in	r24, 0x33	; 51
 840:	8d 7f       	andi	r24, 0xFD	; 253
 842:	83 bf       	out	0x33, r24	; 51
    CLEAR_BIT(TCCR0,BIT_2);
 844:	83 b7       	in	r24, 0x33	; 51
 846:	8b 7f       	andi	r24, 0xFB	; 251
 848:	83 bf       	out	0x33, r24	; 51
    return TIMER_OK;
}
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	08 95       	ret

0000084e <TIMER_delay>:

EN_timerError_T TIMER_delay(uint16_t millisec) {
 84e:	8f 92       	push	r8
 850:	9f 92       	push	r9
 852:	af 92       	push	r10
 854:	bf 92       	push	r11
 856:	cf 92       	push	r12
 858:	df 92       	push	r13
 85a:	ef 92       	push	r14
 85c:	ff 92       	push	r15
 85e:	cf 93       	push	r28
 860:	df 93       	push	r29
    if(millisec>10000)
 862:	81 31       	cpi	r24, 0x11	; 17
 864:	27 e2       	ldi	r18, 0x27	; 39
 866:	92 07       	cpc	r25, r18
 868:	08 f0       	brcs	.+2      	; 0x86c <__stack+0xd>
 86a:	6e c0       	rjmp	.+220    	; 0x948 <__stack+0xe9>
 86c:	ec 01       	movw	r28, r24
    //max delay 256 micro second
    //at 1MHz no prescaler
    // 256 prescaler
    tTick = 256.0/1000.0; //ms    tTick = Presc/FCPU
    tMax= 65.536; //ms		tMax = tTick * 2^8
    if(millisec<tMax){
 86e:	bc 01       	movw	r22, r24
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__floatunsisf>
 878:	6b 01       	movw	r12, r22
 87a:	7c 01       	movw	r14, r24
 87c:	2f e6       	ldi	r18, 0x6F	; 111
 87e:	32 e1       	ldi	r19, 0x12	; 18
 880:	43 e8       	ldi	r20, 0x83	; 131
 882:	52 e4       	ldi	r21, 0x42	; 66
 884:	0e 94 34 05 	call	0xa68	; 0xa68 <__cmpsf2>
 888:	88 23       	and	r24, r24
 88a:	9c f4       	brge	.+38     	; 0x8b2 <__stack+0x53>
        tmrInitial = (tMax-millisec)/tTick;
 88c:	a7 01       	movw	r20, r14
 88e:	96 01       	movw	r18, r12
 890:	6f e6       	ldi	r22, 0x6F	; 111
 892:	72 e1       	ldi	r23, 0x12	; 18
 894:	83 e8       	ldi	r24, 0x83	; 131
 896:	92 e4       	ldi	r25, 0x42	; 66
 898:	0e 94 b0 04 	call	0x960	; 0x960 <__subsf3>
 89c:	2f e6       	ldi	r18, 0x6F	; 111
 89e:	32 e1       	ldi	r19, 0x12	; 18
 8a0:	43 e8       	ldi	r20, 0x83	; 131
 8a2:	5e e3       	ldi	r21, 0x3E	; 62
 8a4:	0e 94 39 05 	call	0xa72	; 0xa72 <__divsf3>
 8a8:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fixunssfsi>
        N = 1;
 8ac:	c1 e0       	ldi	r28, 0x01	; 1
 8ae:	d0 e0       	ldi	r29, 0x00	; 0
 8b0:	35 c0       	rjmp	.+106    	; 0x91c <__stack+0xbd>

    }else if(millisec == (uint32_t)tMax){
 8b2:	c1 34       	cpi	r28, 0x41	; 65
 8b4:	d1 05       	cpc	r29, r1
 8b6:	79 f1       	breq	.+94     	; 0x916 <__stack+0xb7>
        tmrInitial=0;
        N=1;
    }else{
        N = ceil((int64_t)millisec/tMax);
 8b8:	2f e6       	ldi	r18, 0x6F	; 111
 8ba:	32 e1       	ldi	r19, 0x12	; 18
 8bc:	43 e8       	ldi	r20, 0x83	; 131
 8be:	52 e4       	ldi	r21, 0x42	; 66
 8c0:	c7 01       	movw	r24, r14
 8c2:	b6 01       	movw	r22, r12
 8c4:	0e 94 39 05 	call	0xa72	; 0xa72 <__divsf3>
 8c8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <ceil>
 8cc:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fixunssfsi>
 8d0:	4b 01       	movw	r8, r22
 8d2:	5c 01       	movw	r10, r24
 8d4:	eb 01       	movw	r28, r22
        tmrInitial = (1<<8) - ((int64_t )millisec/tTick)/N;
 8d6:	2f e6       	ldi	r18, 0x6F	; 111
 8d8:	32 e1       	ldi	r19, 0x12	; 18
 8da:	43 e8       	ldi	r20, 0x83	; 131
 8dc:	5e e3       	ldi	r21, 0x3E	; 62
 8de:	c7 01       	movw	r24, r14
 8e0:	b6 01       	movw	r22, r12
 8e2:	0e 94 39 05 	call	0xa72	; 0xa72 <__divsf3>
 8e6:	6b 01       	movw	r12, r22
 8e8:	7c 01       	movw	r14, r24
 8ea:	b4 01       	movw	r22, r8
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__floatunsisf>
 8f4:	9b 01       	movw	r18, r22
 8f6:	ac 01       	movw	r20, r24
 8f8:	c7 01       	movw	r24, r14
 8fa:	b6 01       	movw	r22, r12
 8fc:	0e 94 39 05 	call	0xa72	; 0xa72 <__divsf3>
 900:	9b 01       	movw	r18, r22
 902:	ac 01       	movw	r20, r24
 904:	60 e0       	ldi	r22, 0x00	; 0
 906:	70 e0       	ldi	r23, 0x00	; 0
 908:	80 e8       	ldi	r24, 0x80	; 128
 90a:	93 e4       	ldi	r25, 0x43	; 67
 90c:	0e 94 b0 04 	call	0x960	; 0x960 <__subsf3>
 910:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fixunssfsi>
 914:	03 c0       	rjmp	.+6      	; 0x91c <__stack+0xbd>
    if(millisec<tMax){
        tmrInitial = (tMax-millisec)/tTick;
        N = 1;

    }else if(millisec == (uint32_t)tMax){
        tmrInitial=0;
 916:	60 e0       	ldi	r22, 0x00	; 0
        N=1;
 918:	c1 e0       	ldi	r28, 0x01	; 1
 91a:	d0 e0       	ldi	r29, 0x00	; 0
    }else{
        N = ceil((int64_t)millisec/tMax);
        tmrInitial = (1<<8) - ((int64_t )millisec/tTick)/N;

    }
    TCNT0 = tmrInitial;
 91c:	62 bf       	out	0x32, r22	; 50
    SET_BIT(TCCR0,BIT_2);//set 256 prescaler
 91e:	83 b7       	in	r24, 0x33	; 51
 920:	84 60       	ori	r24, 0x04	; 4
 922:	83 bf       	out	0x33, r24	; 51
EN_timerError_T TIMER_delay(uint16_t millisec) {
    if(millisec>10000)
        return LARGE_DELAY;
    uint16_t N,tmrInitial;
    int64_t tMax,tTick;
    uint32_t overFlowcnt=0;
 924:	20 e0       	ldi	r18, 0x00	; 0
 926:	30 e0       	ldi	r19, 0x00	; 0
        tmrInitial = (1<<8) - ((int64_t )millisec/tTick)/N;

    }
    TCNT0 = tmrInitial;
    SET_BIT(TCCR0,BIT_2);//set 256 prescaler
    while(overFlowcnt<N){
 928:	08 c0       	rjmp	.+16     	; 0x93a <__stack+0xdb>
        //busy wait
        while(CHECK_BIT(TIFR,BIT_0)==LOW);
 92a:	08 b6       	in	r0, 0x38	; 56
 92c:	00 fe       	sbrs	r0, 0
 92e:	fd cf       	rjmp	.-6      	; 0x92a <__stack+0xcb>
        //clear overflow flag
        SET_BIT(TIFR,BIT_0);
 930:	88 b7       	in	r24, 0x38	; 56
 932:	81 60       	ori	r24, 0x01	; 1
 934:	88 bf       	out	0x38, r24	; 56
        //increment counter
        overFlowcnt++;
 936:	2f 5f       	subi	r18, 0xFF	; 255
 938:	3f 4f       	sbci	r19, 0xFF	; 255
        tmrInitial = (1<<8) - ((int64_t )millisec/tTick)/N;

    }
    TCNT0 = tmrInitial;
    SET_BIT(TCCR0,BIT_2);//set 256 prescaler
    while(overFlowcnt<N){
 93a:	2c 17       	cp	r18, r28
 93c:	3d 07       	cpc	r19, r29
 93e:	a8 f3       	brcs	.-22     	; 0x92a <__stack+0xcb>
        SET_BIT(TIFR,BIT_0);
        //increment counter
        overFlowcnt++;
    }
    //Timer stop
    TIMER_init();
 940:	0e 94 1c 04 	call	0x838	; 0x838 <TIMER_init>
    return TIMER_OK;
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	01 c0       	rjmp	.+2      	; 0x94a <__stack+0xeb>
    return TIMER_OK;
}

EN_timerError_T TIMER_delay(uint16_t millisec) {
    if(millisec>10000)
        return LARGE_DELAY;
 948:	81 e0       	ldi	r24, 0x01	; 1
        overFlowcnt++;
    }
    //Timer stop
    TIMER_init();
    return TIMER_OK;
}
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	ff 90       	pop	r15
 950:	ef 90       	pop	r14
 952:	df 90       	pop	r13
 954:	cf 90       	pop	r12
 956:	bf 90       	pop	r11
 958:	af 90       	pop	r10
 95a:	9f 90       	pop	r9
 95c:	8f 90       	pop	r8
 95e:	08 95       	ret

00000960 <__subsf3>:
 960:	50 58       	subi	r21, 0x80	; 128

00000962 <__addsf3>:
 962:	bb 27       	eor	r27, r27
 964:	aa 27       	eor	r26, r26
 966:	0e 94 c8 04 	call	0x990	; 0x990 <__addsf3x>
 96a:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_round>
 96e:	0e 94 6d 06 	call	0xcda	; 0xcda <__fp_pscA>
 972:	38 f0       	brcs	.+14     	; 0x982 <__addsf3+0x20>
 974:	0e 94 74 06 	call	0xce8	; 0xce8 <__fp_pscB>
 978:	20 f0       	brcs	.+8      	; 0x982 <__addsf3+0x20>
 97a:	39 f4       	brne	.+14     	; 0x98a <__addsf3+0x28>
 97c:	9f 3f       	cpi	r25, 0xFF	; 255
 97e:	19 f4       	brne	.+6      	; 0x986 <__addsf3+0x24>
 980:	26 f4       	brtc	.+8      	; 0x98a <__addsf3+0x28>
 982:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_nan>
 986:	0e f4       	brtc	.+2      	; 0x98a <__addsf3+0x28>
 988:	e0 95       	com	r30
 98a:	e7 fb       	bst	r30, 7
 98c:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__fp_inf>

00000990 <__addsf3x>:
 990:	e9 2f       	mov	r30, r25
 992:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fp_split3>
 996:	58 f3       	brcs	.-42     	; 0x96e <__addsf3+0xc>
 998:	ba 17       	cp	r27, r26
 99a:	62 07       	cpc	r22, r18
 99c:	73 07       	cpc	r23, r19
 99e:	84 07       	cpc	r24, r20
 9a0:	95 07       	cpc	r25, r21
 9a2:	20 f0       	brcs	.+8      	; 0x9ac <__addsf3x+0x1c>
 9a4:	79 f4       	brne	.+30     	; 0x9c4 <__addsf3x+0x34>
 9a6:	a6 f5       	brtc	.+104    	; 0xa10 <__addsf3x+0x80>
 9a8:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__fp_zero>
 9ac:	0e f4       	brtc	.+2      	; 0x9b0 <__addsf3x+0x20>
 9ae:	e0 95       	com	r30
 9b0:	0b 2e       	mov	r0, r27
 9b2:	ba 2f       	mov	r27, r26
 9b4:	a0 2d       	mov	r26, r0
 9b6:	0b 01       	movw	r0, r22
 9b8:	b9 01       	movw	r22, r18
 9ba:	90 01       	movw	r18, r0
 9bc:	0c 01       	movw	r0, r24
 9be:	ca 01       	movw	r24, r20
 9c0:	a0 01       	movw	r20, r0
 9c2:	11 24       	eor	r1, r1
 9c4:	ff 27       	eor	r31, r31
 9c6:	59 1b       	sub	r21, r25
 9c8:	99 f0       	breq	.+38     	; 0x9f0 <__addsf3x+0x60>
 9ca:	59 3f       	cpi	r21, 0xF9	; 249
 9cc:	50 f4       	brcc	.+20     	; 0x9e2 <__addsf3x+0x52>
 9ce:	50 3e       	cpi	r21, 0xE0	; 224
 9d0:	68 f1       	brcs	.+90     	; 0xa2c <__addsf3x+0x9c>
 9d2:	1a 16       	cp	r1, r26
 9d4:	f0 40       	sbci	r31, 0x00	; 0
 9d6:	a2 2f       	mov	r26, r18
 9d8:	23 2f       	mov	r18, r19
 9da:	34 2f       	mov	r19, r20
 9dc:	44 27       	eor	r20, r20
 9de:	58 5f       	subi	r21, 0xF8	; 248
 9e0:	f3 cf       	rjmp	.-26     	; 0x9c8 <__addsf3x+0x38>
 9e2:	46 95       	lsr	r20
 9e4:	37 95       	ror	r19
 9e6:	27 95       	ror	r18
 9e8:	a7 95       	ror	r26
 9ea:	f0 40       	sbci	r31, 0x00	; 0
 9ec:	53 95       	inc	r21
 9ee:	c9 f7       	brne	.-14     	; 0x9e2 <__addsf3x+0x52>
 9f0:	7e f4       	brtc	.+30     	; 0xa10 <__addsf3x+0x80>
 9f2:	1f 16       	cp	r1, r31
 9f4:	ba 0b       	sbc	r27, r26
 9f6:	62 0b       	sbc	r22, r18
 9f8:	73 0b       	sbc	r23, r19
 9fa:	84 0b       	sbc	r24, r20
 9fc:	ba f0       	brmi	.+46     	; 0xa2c <__addsf3x+0x9c>
 9fe:	91 50       	subi	r25, 0x01	; 1
 a00:	a1 f0       	breq	.+40     	; 0xa2a <__addsf3x+0x9a>
 a02:	ff 0f       	add	r31, r31
 a04:	bb 1f       	adc	r27, r27
 a06:	66 1f       	adc	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	c2 f7       	brpl	.-16     	; 0x9fe <__addsf3x+0x6e>
 a0e:	0e c0       	rjmp	.+28     	; 0xa2c <__addsf3x+0x9c>
 a10:	ba 0f       	add	r27, r26
 a12:	62 1f       	adc	r22, r18
 a14:	73 1f       	adc	r23, r19
 a16:	84 1f       	adc	r24, r20
 a18:	48 f4       	brcc	.+18     	; 0xa2c <__addsf3x+0x9c>
 a1a:	87 95       	ror	r24
 a1c:	77 95       	ror	r23
 a1e:	67 95       	ror	r22
 a20:	b7 95       	ror	r27
 a22:	f7 95       	ror	r31
 a24:	9e 3f       	cpi	r25, 0xFE	; 254
 a26:	08 f0       	brcs	.+2      	; 0xa2a <__addsf3x+0x9a>
 a28:	b0 cf       	rjmp	.-160    	; 0x98a <__addsf3+0x28>
 a2a:	93 95       	inc	r25
 a2c:	88 0f       	add	r24, r24
 a2e:	08 f0       	brcs	.+2      	; 0xa32 <__addsf3x+0xa2>
 a30:	99 27       	eor	r25, r25
 a32:	ee 0f       	add	r30, r30
 a34:	97 95       	ror	r25
 a36:	87 95       	ror	r24
 a38:	08 95       	ret

00000a3a <ceil>:
 a3a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_trunc>
 a3e:	90 f0       	brcs	.+36     	; 0xa64 <ceil+0x2a>
 a40:	9f 37       	cpi	r25, 0x7F	; 127
 a42:	48 f4       	brcc	.+18     	; 0xa56 <ceil+0x1c>
 a44:	91 11       	cpse	r25, r1
 a46:	16 f4       	brtc	.+4      	; 0xa4c <ceil+0x12>
 a48:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__fp_szero>
 a4c:	60 e0       	ldi	r22, 0x00	; 0
 a4e:	70 e0       	ldi	r23, 0x00	; 0
 a50:	80 e8       	ldi	r24, 0x80	; 128
 a52:	9f e3       	ldi	r25, 0x3F	; 63
 a54:	08 95       	ret
 a56:	26 f0       	brts	.+8      	; 0xa60 <ceil+0x26>
 a58:	1b 16       	cp	r1, r27
 a5a:	61 1d       	adc	r22, r1
 a5c:	71 1d       	adc	r23, r1
 a5e:	81 1d       	adc	r24, r1
 a60:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_mintl>
 a64:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__fp_mpack>

00000a68 <__cmpsf2>:
 a68:	0e 94 17 06 	call	0xc2e	; 0xc2e <__fp_cmp>
 a6c:	08 f4       	brcc	.+2      	; 0xa70 <__cmpsf2+0x8>
 a6e:	81 e0       	ldi	r24, 0x01	; 1
 a70:	08 95       	ret

00000a72 <__divsf3>:
 a72:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__divsf3x>
 a76:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_round>
 a7a:	0e 94 74 06 	call	0xce8	; 0xce8 <__fp_pscB>
 a7e:	58 f0       	brcs	.+22     	; 0xa96 <__divsf3+0x24>
 a80:	0e 94 6d 06 	call	0xcda	; 0xcda <__fp_pscA>
 a84:	40 f0       	brcs	.+16     	; 0xa96 <__divsf3+0x24>
 a86:	29 f4       	brne	.+10     	; 0xa92 <__divsf3+0x20>
 a88:	5f 3f       	cpi	r21, 0xFF	; 255
 a8a:	29 f0       	breq	.+10     	; 0xa96 <__divsf3+0x24>
 a8c:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__fp_inf>
 a90:	51 11       	cpse	r21, r1
 a92:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__fp_szero>
 a96:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__fp_nan>

00000a9a <__divsf3x>:
 a9a:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fp_split3>
 a9e:	68 f3       	brcs	.-38     	; 0xa7a <__divsf3+0x8>

00000aa0 <__divsf3_pse>:
 aa0:	99 23       	and	r25, r25
 aa2:	b1 f3       	breq	.-20     	; 0xa90 <__divsf3+0x1e>
 aa4:	55 23       	and	r21, r21
 aa6:	91 f3       	breq	.-28     	; 0xa8c <__divsf3+0x1a>
 aa8:	95 1b       	sub	r25, r21
 aaa:	55 0b       	sbc	r21, r21
 aac:	bb 27       	eor	r27, r27
 aae:	aa 27       	eor	r26, r26
 ab0:	62 17       	cp	r22, r18
 ab2:	73 07       	cpc	r23, r19
 ab4:	84 07       	cpc	r24, r20
 ab6:	38 f0       	brcs	.+14     	; 0xac6 <__divsf3_pse+0x26>
 ab8:	9f 5f       	subi	r25, 0xFF	; 255
 aba:	5f 4f       	sbci	r21, 0xFF	; 255
 abc:	22 0f       	add	r18, r18
 abe:	33 1f       	adc	r19, r19
 ac0:	44 1f       	adc	r20, r20
 ac2:	aa 1f       	adc	r26, r26
 ac4:	a9 f3       	breq	.-22     	; 0xab0 <__divsf3_pse+0x10>
 ac6:	35 d0       	rcall	.+106    	; 0xb32 <__divsf3_pse+0x92>
 ac8:	0e 2e       	mov	r0, r30
 aca:	3a f0       	brmi	.+14     	; 0xada <__divsf3_pse+0x3a>
 acc:	e0 e8       	ldi	r30, 0x80	; 128
 ace:	32 d0       	rcall	.+100    	; 0xb34 <__divsf3_pse+0x94>
 ad0:	91 50       	subi	r25, 0x01	; 1
 ad2:	50 40       	sbci	r21, 0x00	; 0
 ad4:	e6 95       	lsr	r30
 ad6:	00 1c       	adc	r0, r0
 ad8:	ca f7       	brpl	.-14     	; 0xacc <__divsf3_pse+0x2c>
 ada:	2b d0       	rcall	.+86     	; 0xb32 <__divsf3_pse+0x92>
 adc:	fe 2f       	mov	r31, r30
 ade:	29 d0       	rcall	.+82     	; 0xb32 <__divsf3_pse+0x92>
 ae0:	66 0f       	add	r22, r22
 ae2:	77 1f       	adc	r23, r23
 ae4:	88 1f       	adc	r24, r24
 ae6:	bb 1f       	adc	r27, r27
 ae8:	26 17       	cp	r18, r22
 aea:	37 07       	cpc	r19, r23
 aec:	48 07       	cpc	r20, r24
 aee:	ab 07       	cpc	r26, r27
 af0:	b0 e8       	ldi	r27, 0x80	; 128
 af2:	09 f0       	breq	.+2      	; 0xaf6 <__divsf3_pse+0x56>
 af4:	bb 0b       	sbc	r27, r27
 af6:	80 2d       	mov	r24, r0
 af8:	bf 01       	movw	r22, r30
 afa:	ff 27       	eor	r31, r31
 afc:	93 58       	subi	r25, 0x83	; 131
 afe:	5f 4f       	sbci	r21, 0xFF	; 255
 b00:	3a f0       	brmi	.+14     	; 0xb10 <__divsf3_pse+0x70>
 b02:	9e 3f       	cpi	r25, 0xFE	; 254
 b04:	51 05       	cpc	r21, r1
 b06:	78 f0       	brcs	.+30     	; 0xb26 <__divsf3_pse+0x86>
 b08:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__fp_inf>
 b0c:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__fp_szero>
 b10:	5f 3f       	cpi	r21, 0xFF	; 255
 b12:	e4 f3       	brlt	.-8      	; 0xb0c <__divsf3_pse+0x6c>
 b14:	98 3e       	cpi	r25, 0xE8	; 232
 b16:	d4 f3       	brlt	.-12     	; 0xb0c <__divsf3_pse+0x6c>
 b18:	86 95       	lsr	r24
 b1a:	77 95       	ror	r23
 b1c:	67 95       	ror	r22
 b1e:	b7 95       	ror	r27
 b20:	f7 95       	ror	r31
 b22:	9f 5f       	subi	r25, 0xFF	; 255
 b24:	c9 f7       	brne	.-14     	; 0xb18 <__divsf3_pse+0x78>
 b26:	88 0f       	add	r24, r24
 b28:	91 1d       	adc	r25, r1
 b2a:	96 95       	lsr	r25
 b2c:	87 95       	ror	r24
 b2e:	97 f9       	bld	r25, 7
 b30:	08 95       	ret
 b32:	e1 e0       	ldi	r30, 0x01	; 1
 b34:	66 0f       	add	r22, r22
 b36:	77 1f       	adc	r23, r23
 b38:	88 1f       	adc	r24, r24
 b3a:	bb 1f       	adc	r27, r27
 b3c:	62 17       	cp	r22, r18
 b3e:	73 07       	cpc	r23, r19
 b40:	84 07       	cpc	r24, r20
 b42:	ba 07       	cpc	r27, r26
 b44:	20 f0       	brcs	.+8      	; 0xb4e <__divsf3_pse+0xae>
 b46:	62 1b       	sub	r22, r18
 b48:	73 0b       	sbc	r23, r19
 b4a:	84 0b       	sbc	r24, r20
 b4c:	ba 0b       	sbc	r27, r26
 b4e:	ee 1f       	adc	r30, r30
 b50:	88 f7       	brcc	.-30     	; 0xb34 <__divsf3_pse+0x94>
 b52:	e0 95       	com	r30
 b54:	08 95       	ret

00000b56 <__fixunssfsi>:
 b56:	0e 94 94 06 	call	0xd28	; 0xd28 <__fp_splitA>
 b5a:	88 f0       	brcs	.+34     	; 0xb7e <__fixunssfsi+0x28>
 b5c:	9f 57       	subi	r25, 0x7F	; 127
 b5e:	98 f0       	brcs	.+38     	; 0xb86 <__fixunssfsi+0x30>
 b60:	b9 2f       	mov	r27, r25
 b62:	99 27       	eor	r25, r25
 b64:	b7 51       	subi	r27, 0x17	; 23
 b66:	b0 f0       	brcs	.+44     	; 0xb94 <__fixunssfsi+0x3e>
 b68:	e1 f0       	breq	.+56     	; 0xba2 <__fixunssfsi+0x4c>
 b6a:	66 0f       	add	r22, r22
 b6c:	77 1f       	adc	r23, r23
 b6e:	88 1f       	adc	r24, r24
 b70:	99 1f       	adc	r25, r25
 b72:	1a f0       	brmi	.+6      	; 0xb7a <__fixunssfsi+0x24>
 b74:	ba 95       	dec	r27
 b76:	c9 f7       	brne	.-14     	; 0xb6a <__fixunssfsi+0x14>
 b78:	14 c0       	rjmp	.+40     	; 0xba2 <__fixunssfsi+0x4c>
 b7a:	b1 30       	cpi	r27, 0x01	; 1
 b7c:	91 f0       	breq	.+36     	; 0xba2 <__fixunssfsi+0x4c>
 b7e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fp_zero>
 b82:	b1 e0       	ldi	r27, 0x01	; 1
 b84:	08 95       	ret
 b86:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__fp_zero>
 b8a:	67 2f       	mov	r22, r23
 b8c:	78 2f       	mov	r23, r24
 b8e:	88 27       	eor	r24, r24
 b90:	b8 5f       	subi	r27, 0xF8	; 248
 b92:	39 f0       	breq	.+14     	; 0xba2 <__fixunssfsi+0x4c>
 b94:	b9 3f       	cpi	r27, 0xF9	; 249
 b96:	cc f3       	brlt	.-14     	; 0xb8a <__fixunssfsi+0x34>
 b98:	86 95       	lsr	r24
 b9a:	77 95       	ror	r23
 b9c:	67 95       	ror	r22
 b9e:	b3 95       	inc	r27
 ba0:	d9 f7       	brne	.-10     	; 0xb98 <__fixunssfsi+0x42>
 ba2:	3e f4       	brtc	.+14     	; 0xbb2 <__fixunssfsi+0x5c>
 ba4:	90 95       	com	r25
 ba6:	80 95       	com	r24
 ba8:	70 95       	com	r23
 baa:	61 95       	neg	r22
 bac:	7f 4f       	sbci	r23, 0xFF	; 255
 bae:	8f 4f       	sbci	r24, 0xFF	; 255
 bb0:	9f 4f       	sbci	r25, 0xFF	; 255
 bb2:	08 95       	ret

00000bb4 <__floatunsisf>:
 bb4:	e8 94       	clt
 bb6:	09 c0       	rjmp	.+18     	; 0xbca <__floatsisf+0x12>

00000bb8 <__floatsisf>:
 bb8:	97 fb       	bst	r25, 7
 bba:	3e f4       	brtc	.+14     	; 0xbca <__floatsisf+0x12>
 bbc:	90 95       	com	r25
 bbe:	80 95       	com	r24
 bc0:	70 95       	com	r23
 bc2:	61 95       	neg	r22
 bc4:	7f 4f       	sbci	r23, 0xFF	; 255
 bc6:	8f 4f       	sbci	r24, 0xFF	; 255
 bc8:	9f 4f       	sbci	r25, 0xFF	; 255
 bca:	99 23       	and	r25, r25
 bcc:	a9 f0       	breq	.+42     	; 0xbf8 <__floatsisf+0x40>
 bce:	f9 2f       	mov	r31, r25
 bd0:	96 e9       	ldi	r25, 0x96	; 150
 bd2:	bb 27       	eor	r27, r27
 bd4:	93 95       	inc	r25
 bd6:	f6 95       	lsr	r31
 bd8:	87 95       	ror	r24
 bda:	77 95       	ror	r23
 bdc:	67 95       	ror	r22
 bde:	b7 95       	ror	r27
 be0:	f1 11       	cpse	r31, r1
 be2:	f8 cf       	rjmp	.-16     	; 0xbd4 <__floatsisf+0x1c>
 be4:	fa f4       	brpl	.+62     	; 0xc24 <__floatsisf+0x6c>
 be6:	bb 0f       	add	r27, r27
 be8:	11 f4       	brne	.+4      	; 0xbee <__floatsisf+0x36>
 bea:	60 ff       	sbrs	r22, 0
 bec:	1b c0       	rjmp	.+54     	; 0xc24 <__floatsisf+0x6c>
 bee:	6f 5f       	subi	r22, 0xFF	; 255
 bf0:	7f 4f       	sbci	r23, 0xFF	; 255
 bf2:	8f 4f       	sbci	r24, 0xFF	; 255
 bf4:	9f 4f       	sbci	r25, 0xFF	; 255
 bf6:	16 c0       	rjmp	.+44     	; 0xc24 <__floatsisf+0x6c>
 bf8:	88 23       	and	r24, r24
 bfa:	11 f0       	breq	.+4      	; 0xc00 <__floatsisf+0x48>
 bfc:	96 e9       	ldi	r25, 0x96	; 150
 bfe:	11 c0       	rjmp	.+34     	; 0xc22 <__floatsisf+0x6a>
 c00:	77 23       	and	r23, r23
 c02:	21 f0       	breq	.+8      	; 0xc0c <__floatsisf+0x54>
 c04:	9e e8       	ldi	r25, 0x8E	; 142
 c06:	87 2f       	mov	r24, r23
 c08:	76 2f       	mov	r23, r22
 c0a:	05 c0       	rjmp	.+10     	; 0xc16 <__floatsisf+0x5e>
 c0c:	66 23       	and	r22, r22
 c0e:	71 f0       	breq	.+28     	; 0xc2c <__floatsisf+0x74>
 c10:	96 e8       	ldi	r25, 0x86	; 134
 c12:	86 2f       	mov	r24, r22
 c14:	70 e0       	ldi	r23, 0x00	; 0
 c16:	60 e0       	ldi	r22, 0x00	; 0
 c18:	2a f0       	brmi	.+10     	; 0xc24 <__floatsisf+0x6c>
 c1a:	9a 95       	dec	r25
 c1c:	66 0f       	add	r22, r22
 c1e:	77 1f       	adc	r23, r23
 c20:	88 1f       	adc	r24, r24
 c22:	da f7       	brpl	.-10     	; 0xc1a <__floatsisf+0x62>
 c24:	88 0f       	add	r24, r24
 c26:	96 95       	lsr	r25
 c28:	87 95       	ror	r24
 c2a:	97 f9       	bld	r25, 7
 c2c:	08 95       	ret

00000c2e <__fp_cmp>:
 c2e:	99 0f       	add	r25, r25
 c30:	00 08       	sbc	r0, r0
 c32:	55 0f       	add	r21, r21
 c34:	aa 0b       	sbc	r26, r26
 c36:	e0 e8       	ldi	r30, 0x80	; 128
 c38:	fe ef       	ldi	r31, 0xFE	; 254
 c3a:	16 16       	cp	r1, r22
 c3c:	17 06       	cpc	r1, r23
 c3e:	e8 07       	cpc	r30, r24
 c40:	f9 07       	cpc	r31, r25
 c42:	c0 f0       	brcs	.+48     	; 0xc74 <__fp_cmp+0x46>
 c44:	12 16       	cp	r1, r18
 c46:	13 06       	cpc	r1, r19
 c48:	e4 07       	cpc	r30, r20
 c4a:	f5 07       	cpc	r31, r21
 c4c:	98 f0       	brcs	.+38     	; 0xc74 <__fp_cmp+0x46>
 c4e:	62 1b       	sub	r22, r18
 c50:	73 0b       	sbc	r23, r19
 c52:	84 0b       	sbc	r24, r20
 c54:	95 0b       	sbc	r25, r21
 c56:	39 f4       	brne	.+14     	; 0xc66 <__fp_cmp+0x38>
 c58:	0a 26       	eor	r0, r26
 c5a:	61 f0       	breq	.+24     	; 0xc74 <__fp_cmp+0x46>
 c5c:	23 2b       	or	r18, r19
 c5e:	24 2b       	or	r18, r20
 c60:	25 2b       	or	r18, r21
 c62:	21 f4       	brne	.+8      	; 0xc6c <__fp_cmp+0x3e>
 c64:	08 95       	ret
 c66:	0a 26       	eor	r0, r26
 c68:	09 f4       	brne	.+2      	; 0xc6c <__fp_cmp+0x3e>
 c6a:	a1 40       	sbci	r26, 0x01	; 1
 c6c:	a6 95       	lsr	r26
 c6e:	8f ef       	ldi	r24, 0xFF	; 255
 c70:	81 1d       	adc	r24, r1
 c72:	81 1d       	adc	r24, r1
 c74:	08 95       	ret

00000c76 <__fp_inf>:
 c76:	97 f9       	bld	r25, 7
 c78:	9f 67       	ori	r25, 0x7F	; 127
 c7a:	80 e8       	ldi	r24, 0x80	; 128
 c7c:	70 e0       	ldi	r23, 0x00	; 0
 c7e:	60 e0       	ldi	r22, 0x00	; 0
 c80:	08 95       	ret

00000c82 <__fp_mintl>:
 c82:	88 23       	and	r24, r24
 c84:	71 f4       	brne	.+28     	; 0xca2 <__fp_mintl+0x20>
 c86:	77 23       	and	r23, r23
 c88:	21 f0       	breq	.+8      	; 0xc92 <__fp_mintl+0x10>
 c8a:	98 50       	subi	r25, 0x08	; 8
 c8c:	87 2b       	or	r24, r23
 c8e:	76 2f       	mov	r23, r22
 c90:	07 c0       	rjmp	.+14     	; 0xca0 <__fp_mintl+0x1e>
 c92:	66 23       	and	r22, r22
 c94:	11 f4       	brne	.+4      	; 0xc9a <__fp_mintl+0x18>
 c96:	99 27       	eor	r25, r25
 c98:	0d c0       	rjmp	.+26     	; 0xcb4 <__fp_mintl+0x32>
 c9a:	90 51       	subi	r25, 0x10	; 16
 c9c:	86 2b       	or	r24, r22
 c9e:	70 e0       	ldi	r23, 0x00	; 0
 ca0:	60 e0       	ldi	r22, 0x00	; 0
 ca2:	2a f0       	brmi	.+10     	; 0xcae <__fp_mintl+0x2c>
 ca4:	9a 95       	dec	r25
 ca6:	66 0f       	add	r22, r22
 ca8:	77 1f       	adc	r23, r23
 caa:	88 1f       	adc	r24, r24
 cac:	da f7       	brpl	.-10     	; 0xca4 <__fp_mintl+0x22>
 cae:	88 0f       	add	r24, r24
 cb0:	96 95       	lsr	r25
 cb2:	87 95       	ror	r24
 cb4:	97 f9       	bld	r25, 7
 cb6:	08 95       	ret

00000cb8 <__fp_mpack>:
 cb8:	9f 3f       	cpi	r25, 0xFF	; 255
 cba:	31 f0       	breq	.+12     	; 0xcc8 <__fp_mpack_finite+0xc>

00000cbc <__fp_mpack_finite>:
 cbc:	91 50       	subi	r25, 0x01	; 1
 cbe:	20 f4       	brcc	.+8      	; 0xcc8 <__fp_mpack_finite+0xc>
 cc0:	87 95       	ror	r24
 cc2:	77 95       	ror	r23
 cc4:	67 95       	ror	r22
 cc6:	b7 95       	ror	r27
 cc8:	88 0f       	add	r24, r24
 cca:	91 1d       	adc	r25, r1
 ccc:	96 95       	lsr	r25
 cce:	87 95       	ror	r24
 cd0:	97 f9       	bld	r25, 7
 cd2:	08 95       	ret

00000cd4 <__fp_nan>:
 cd4:	9f ef       	ldi	r25, 0xFF	; 255
 cd6:	80 ec       	ldi	r24, 0xC0	; 192
 cd8:	08 95       	ret

00000cda <__fp_pscA>:
 cda:	00 24       	eor	r0, r0
 cdc:	0a 94       	dec	r0
 cde:	16 16       	cp	r1, r22
 ce0:	17 06       	cpc	r1, r23
 ce2:	18 06       	cpc	r1, r24
 ce4:	09 06       	cpc	r0, r25
 ce6:	08 95       	ret

00000ce8 <__fp_pscB>:
 ce8:	00 24       	eor	r0, r0
 cea:	0a 94       	dec	r0
 cec:	12 16       	cp	r1, r18
 cee:	13 06       	cpc	r1, r19
 cf0:	14 06       	cpc	r1, r20
 cf2:	05 06       	cpc	r0, r21
 cf4:	08 95       	ret

00000cf6 <__fp_round>:
 cf6:	09 2e       	mov	r0, r25
 cf8:	03 94       	inc	r0
 cfa:	00 0c       	add	r0, r0
 cfc:	11 f4       	brne	.+4      	; 0xd02 <__fp_round+0xc>
 cfe:	88 23       	and	r24, r24
 d00:	52 f0       	brmi	.+20     	; 0xd16 <__fp_round+0x20>
 d02:	bb 0f       	add	r27, r27
 d04:	40 f4       	brcc	.+16     	; 0xd16 <__fp_round+0x20>
 d06:	bf 2b       	or	r27, r31
 d08:	11 f4       	brne	.+4      	; 0xd0e <__fp_round+0x18>
 d0a:	60 ff       	sbrs	r22, 0
 d0c:	04 c0       	rjmp	.+8      	; 0xd16 <__fp_round+0x20>
 d0e:	6f 5f       	subi	r22, 0xFF	; 255
 d10:	7f 4f       	sbci	r23, 0xFF	; 255
 d12:	8f 4f       	sbci	r24, 0xFF	; 255
 d14:	9f 4f       	sbci	r25, 0xFF	; 255
 d16:	08 95       	ret

00000d18 <__fp_split3>:
 d18:	57 fd       	sbrc	r21, 7
 d1a:	90 58       	subi	r25, 0x80	; 128
 d1c:	44 0f       	add	r20, r20
 d1e:	55 1f       	adc	r21, r21
 d20:	59 f0       	breq	.+22     	; 0xd38 <__fp_splitA+0x10>
 d22:	5f 3f       	cpi	r21, 0xFF	; 255
 d24:	71 f0       	breq	.+28     	; 0xd42 <__fp_splitA+0x1a>
 d26:	47 95       	ror	r20

00000d28 <__fp_splitA>:
 d28:	88 0f       	add	r24, r24
 d2a:	97 fb       	bst	r25, 7
 d2c:	99 1f       	adc	r25, r25
 d2e:	61 f0       	breq	.+24     	; 0xd48 <__fp_splitA+0x20>
 d30:	9f 3f       	cpi	r25, 0xFF	; 255
 d32:	79 f0       	breq	.+30     	; 0xd52 <__fp_splitA+0x2a>
 d34:	87 95       	ror	r24
 d36:	08 95       	ret
 d38:	12 16       	cp	r1, r18
 d3a:	13 06       	cpc	r1, r19
 d3c:	14 06       	cpc	r1, r20
 d3e:	55 1f       	adc	r21, r21
 d40:	f2 cf       	rjmp	.-28     	; 0xd26 <__fp_split3+0xe>
 d42:	46 95       	lsr	r20
 d44:	f1 df       	rcall	.-30     	; 0xd28 <__fp_splitA>
 d46:	08 c0       	rjmp	.+16     	; 0xd58 <__fp_splitA+0x30>
 d48:	16 16       	cp	r1, r22
 d4a:	17 06       	cpc	r1, r23
 d4c:	18 06       	cpc	r1, r24
 d4e:	99 1f       	adc	r25, r25
 d50:	f1 cf       	rjmp	.-30     	; 0xd34 <__fp_splitA+0xc>
 d52:	86 95       	lsr	r24
 d54:	71 05       	cpc	r23, r1
 d56:	61 05       	cpc	r22, r1
 d58:	08 94       	sec
 d5a:	08 95       	ret

00000d5c <__fp_trunc>:
 d5c:	0e 94 94 06 	call	0xd28	; 0xd28 <__fp_splitA>
 d60:	a0 f0       	brcs	.+40     	; 0xd8a <__fp_trunc+0x2e>
 d62:	be e7       	ldi	r27, 0x7E	; 126
 d64:	b9 17       	cp	r27, r25
 d66:	88 f4       	brcc	.+34     	; 0xd8a <__fp_trunc+0x2e>
 d68:	bb 27       	eor	r27, r27
 d6a:	9f 38       	cpi	r25, 0x8F	; 143
 d6c:	60 f4       	brcc	.+24     	; 0xd86 <__fp_trunc+0x2a>
 d6e:	16 16       	cp	r1, r22
 d70:	b1 1d       	adc	r27, r1
 d72:	67 2f       	mov	r22, r23
 d74:	78 2f       	mov	r23, r24
 d76:	88 27       	eor	r24, r24
 d78:	98 5f       	subi	r25, 0xF8	; 248
 d7a:	f7 cf       	rjmp	.-18     	; 0xd6a <__fp_trunc+0xe>
 d7c:	86 95       	lsr	r24
 d7e:	77 95       	ror	r23
 d80:	67 95       	ror	r22
 d82:	b1 1d       	adc	r27, r1
 d84:	93 95       	inc	r25
 d86:	96 39       	cpi	r25, 0x96	; 150
 d88:	c8 f3       	brcs	.-14     	; 0xd7c <__fp_trunc+0x20>
 d8a:	08 95       	ret

00000d8c <__fp_zero>:
 d8c:	e8 94       	clt

00000d8e <__fp_szero>:
 d8e:	bb 27       	eor	r27, r27
 d90:	66 27       	eor	r22, r22
 d92:	77 27       	eor	r23, r23
 d94:	cb 01       	movw	r24, r22
 d96:	97 f9       	bld	r25, 7
 d98:	08 95       	ret

00000d9a <_exit>:
 d9a:	f8 94       	cli

00000d9c <__stop_program>:
 d9c:	ff cf       	rjmp	.-2      	; 0xd9c <__stop_program>
